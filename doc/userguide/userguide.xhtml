<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN" "http://www.w3.org/TR/MathML2/dtd/xhtml-math11-f.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta name="GENERATOR" content="LyX 2.0.0" />
<meta http-equiv="Content-type" content="text/html;charset=UTF-8" />
<title>LyX Document</title>

<!-- Text Class Preamble -->
<style type="text/css">
div.toc {
margin: 2em 0em;
border-style: solid;
border-width: 2px 0px;
padding: 1em 0em;
}
div.tochead { font-size: x-large; font-weight: bold; }
div.lyxtoc-0 {
margin: 2em 0em 0em 0em;
font-size: xx-large;
font-weight: bold;
}
div.lyxtoc-1 {
margin: 1em 0em 0em 0em;
font-size: x-large;
font-weight: bold;
}
div.lyxtoc-2 {
margin: 0em 0em 0em 1em;
font-size: large;
font-weight: normal;
}
div.lyxtoc-3 { margin: 0em 0em 0em 0.5em; font-size: medium; }
div.lyxtoc-4 { margin: 0em 0em 0em 0.5em; }
div.lyxtoc-5 { margin: 0em 0em 0em 0.5em; }
div.lyxtoc-6 { margin: 0em 0em 0em 0.5em; }
a.tocentry {
text-decoration: none;
color: black;
}
a.tocentry:visited { color: black; }
a.tocarrow {
font-weight: bold;
text-decoration: none;
color: #909090;
}
a.tocarrow:visited { color: #C0C0C0; }
</style>

<!-- Preamble Snippets -->

<!-- Layout-provided Styles -->
<style type='text/css'>
div.standard {
margin-bottom: 2ex;
}
h1.part {
font-weight: bold;
font-size: xx-large;
margin-top: 4ex;
margin-bottom: 4ex;
text-align: center;

}
h1.chapter {
font-weight: bold;
font-size: xx-large;
margin-top: 4ex;
margin-bottom: 0.8ex;
text-align: left;

}
ul.itemize {
margin-top: 0.7ex;
margin-bottom: 0.7ex;
margin-left: 3ex;
text-align: left;

}
h2.section {
font-weight: bold;
font-size: x-large;
margin-top: 1.3ex;
margin-bottom: 0.7ex;
text-align: left;

}
ol.enumerate {
margin-top: 0.7ex;
margin-bottom: 0.7ex;
margin-left: 3ex;
text-align: left;

}
h3.subsection {
font-weight: bold;
font-size: large;
margin-top: 0.9ex;
margin-bottom: 0.5ex;
text-align: left;

}
h4.subsubsection {
font-weight: bold;
font-size: medium;
margin-top: 0.7ex;
margin-bottom: 0.4ex;
text-align: left;

}
div.plain_layout {
text-align: left;

}
dl.description dt { font-weight: bold; }
blockquote.verse {
margin-top: 0.7ex;
margin-bottom: 0.7ex;
margin-left: 4ex;
text-align: left;

}
div.listings {
font-family: monospace;
}
</style>
</head>
<body>
<div class="standard"><a id='magicparlabel-3' />
</div>
<div class='toc'><div class='tochead chapter'>Table of Contents</div></div>

<div class='lyxtoc-0'><a href='#magicparlabel-4' class='tocentry'>Part I Introduction</a> <a href='#magicparlabel-4' class='tocarrow'>&gt;</a>

<div class='lyxtoc-1'><a href='#magicparlabel-5' class='tocentry'>Chapter 1 Engine Architecture</a> <a href='#magicparlabel-5' class='tocarrow'>&gt;</a>

<div class='lyxtoc-2'><a href='#magicparlabel-13' class='tocentry'>1.1 Client/Server Stream</a> <a href='#magicparlabel-13' class='tocarrow'>&gt;</a></div>

<div class='lyxtoc-2'><a href='#magicparlabel-16' class='tocentry'>1.2 Client/Server Flow</a> <a href='#magicparlabel-16' class='tocarrow'>&gt;</a></div>

<div class='lyxtoc-2'><a href='#magicparlabel-21' class='tocentry'>1.3 Client/Server Handlers</a> <a href='#magicparlabel-21' class='tocarrow'>&gt;</a></div>

<div class='lyxtoc-2'><a href='#magicparlabel-30' class='tocentry'>1.4 Event Model</a> <a href='#magicparlabel-30' class='tocarrow'>&gt;</a></div>
</div>
</div>

<div class='lyxtoc-0'><a href='#magicparlabel-36' class='tocentry'>Part II FIX Engine Configuration</a> <a href='#magicparlabel-36' class='tocarrow'>&gt;</a>

<div class='lyxtoc-1'><a href='#magicparlabel-37' class='tocentry'>Chapter 2 Setting up engine configuration</a> <a href='#magicparlabel-37' class='tocarrow'>&gt;</a>

<div class='lyxtoc-2'><a href='#magicparlabel-38' class='tocentry'>2.1 Prerequisites</a> <a href='#magicparlabel-38' class='tocarrow'>&gt;</a></div>

<div class='lyxtoc-2'><a href='#magicparlabel-42' class='tocentry'>2.2 HadesFIX engine instance</a> <a href='#magicparlabel-42' class='tocarrow'>&gt;</a></div>

<div class='lyxtoc-2'><a href='#magicparlabel-64' class='tocentry'>2.3 Counter-party session configuration</a> <a href='#magicparlabel-64' class='tocarrow'>&gt;</a>

<div class='lyxtoc-3'><a href='#magicparlabel-66' class='tocentry'>2.3.1 TCP connection configuration</a> <a href='#magicparlabel-66' class='tocarrow'>&gt;</a></div>

<div class='lyxtoc-3'><a href='#magicparlabel-86' class='tocentry'>2.3.2 Session Configuration</a> <a href='#magicparlabel-86' class='tocarrow'>&gt;</a></div>
</div>
</div>
</div>

<div class='lyxtoc-0'><a href='#magicparlabel-121' class='tocentry'>Part III FIX Object Model</a> <a href='#magicparlabel-121' class='tocarrow'>&gt;</a>

<div class='lyxtoc-1'><a href='#magicparlabel-143' class='tocentry'>Chapter 3 Custom tags and message handling</a> <a href='#magicparlabel-143' class='tocarrow'>&gt;</a>

<div class='lyxtoc-2'><a href='#magicparlabel-147' class='tocentry'>3.1 Writing a custom message</a> <a href='#magicparlabel-147' class='tocarrow'>&gt;</a>

<div class='lyxtoc-3'><a href='#magicparlabel-149' class='tocentry'>3.1.1 Create a new message class that extends com.marvisan.hades.fix.message.FIXMsg</a> <a href='#magicparlabel-149' class='tocarrow'>&gt;</a></div>

<div class='lyxtoc-3'><a href='#magicparlabel-156' class='tocentry'>3.1.2 Create enclosed components and groups</a> <a href='#magicparlabel-156' class='tocarrow'>&gt;</a></div>

<div class='lyxtoc-3'><a href='#magicparlabel-159' class='tocentry'>3.1.3 Create a custom factory class</a> <a href='#magicparlabel-159' class='tocarrow'>&gt;</a></div>

<div class='lyxtoc-3'><a href='#magicparlabel-161' class='tocentry'>3.1.4 Make the class visible to the FIXMsgBuilder</a> <a href='#magicparlabel-161' class='tocarrow'>&gt;</a></div>

<div class='lyxtoc-3'><a href='#magicparlabel-174' class='tocentry'>3.1.5 Add JAXB annotations to the class (only if FIXML support is required)</a> <a href='#magicparlabel-174' class='tocarrow'>&gt;</a></div>

<div class='lyxtoc-3'><a href='#magicparlabel-176' class='tocentry'>3.1.6 Make the packages holding messages/components/groups visible to the FIXMLBuilder</a> <a href='#magicparlabel-176' class='tocarrow'>&gt;</a></div>
</div>
</div>

<div class='lyxtoc-1'><a href='#magicparlabel-184' class='tocentry'>Chapter 4 Writing a Handler</a> <a href='#magicparlabel-184' class='tocarrow'>&gt;</a></div>

<div class='lyxtoc-1'><a href='#magicparlabel-195' class='tocentry'>Chapter 5 FIXML Support</a> <a href='#magicparlabel-195' class='tocarrow'>&gt;</a></div>

<div class='lyxtoc-1'><a href='#magicparlabel-217' class='tocentry'>Chapter 6 Scheduler</a> <a href='#magicparlabel-217' class='tocarrow'>&gt;</a></div>
</div>

<div class='lyxtoc-0'><a href='#magicparlabel-273' class='tocentry'>Part IV Utilities</a> <a href='#magicparlabel-273' class='tocarrow'>&gt;</a>

<div class='lyxtoc-1'><a href='#magicparlabel-274' class='tocentry'>Chapter 7 Password Bank Utility</a> <a href='#magicparlabel-274' class='tocarrow'>&gt;</a></div>

<div class='lyxtoc-1'><a href='#magicparlabel-284' class='tocentry'>Chapter 8 Management Console Application</a> <a href='#magicparlabel-284' class='tocarrow'>&gt;</a>

<div class='lyxtoc-2'><a href='#magicparlabel-292' class='tocentry'>8.1 Creating a connection to a HadesFIX engine</a> <a href='#magicparlabel-292' class='tocarrow'>&gt;</a></div>

<div class='lyxtoc-2'><a href='#magicparlabel-315' class='tocentry'>8.2 Configured Connections Frame</a> <a href='#magicparlabel-315' class='tocarrow'>&gt;</a></div>

<div class='lyxtoc-2'><a href='#magicparlabel-324' class='tocentry'>8.3 Session Information Frame</a> <a href='#magicparlabel-324' class='tocarrow'>&gt;</a></div>

<div class='lyxtoc-2'><a href='#magicparlabel-347' class='tocentry'>8.4 Session Events Frame</a> <a href='#magicparlabel-347' class='tocarrow'>&gt;</a></div>
</div>

<div class='lyxtoc-1'><a href='#magicparlabel-358' class='tocentry'>Chapter 9 Administration Command Line</a> <a href='#magicparlabel-358' class='tocarrow'>&gt;</a></div>
</div>

<h1 class="part"><span class="part_label">Part I</span> <a id='magicparlabel-4' />
Introduction</h1>
<h1 class="chapter"><span class="chapter_label">Chapter 1</span> <a id='magicparlabel-5' />
Engine Architecture</h1>
<div class="standard"><a id='magicparlabel-6' />
<strong>HadesFIX</strong> engine architecture is based on the concept of FIX session connected to a counter-party. Each configured session will have its Session Coordinator thread started. It is the responsibility of the Session Coordinator to manage all the processes involved in the FIX session connection setup. There can be only two types of session:</div>

<ul class="itemize"><li class="itemize_item"><a id='magicparlabel-7' />
client session - corresponds to the FIX session initiator (buy side). The client session attempts to connect to a server (FIX acceptor) using the TCP transport and logs in and establish a session with the server. </li>
<li class="itemize_item"><a id='magicparlabel-8' />
server session - corresponds to the FIX session acceptor (sell side). The server session wait for client(s) session to connect using the TCP transport, authenticates the client and starts a FIX session.</li>
</ul>
<div class="standard"><a id='magicparlabel-9' />
A <strong>HadesFIX</strong> instance can host multiple client or server sessions configured and running at one time that are connecting to the same or different counter-parties.</div>

<div class="standard"><a id='magicparlabel-10' />
<img src='0C__Projects_svn_trunk_hades_HadesFIXM_docs_userguide_HadesInstance.jpg' alt='image: 0C__Projects_svn_trunk_hades_HadesFIXM_docs_userguide_HadesInstance.jpg' />
</div>

<div class="standard"><a id='magicparlabel-11' />
A <strong>HadesFIX</strong> instance is configured using a XML file. The schema of the XML configuration file can be found in the distribution's "config" directory - <em>HadesEngineConfig.xsd</em> file. The instance configuration file is a mandatory parameter in order to start a <strong>HadesFIX</strong> engine.</div>

<div class="standard"><a id='magicparlabel-12' />
Each FIX session, whether client or server, contains two Streams: a <em>Consumer Stream</em> and a <em>Producer Stream</em>.</div>
<h2 class="section"><span class="section_label">1.1</span> <a id='magicparlabel-13' />
Client/Server Stream</h2>
<div class="standard"><a id='magicparlabel-14' />
A <em>Client/Server Session</em> has two Streams configured: a <em>Consumer Stream</em> and a <em>Producer Stream</em>, each of them running in their own threads. The <em>Consumer Stream</em> is reading messages received from the counter-party using the connected FIX session and deliver these messages to the business application layer. The <em>Producer Stream</em> on the other side takes the messages produced by the business tier and send them to the counter-party using the connected FIX session</div>

<div class="standard"><a id='magicparlabel-15' />
<img src='1C__Projects_svn_trunk_hades_HadesFIXM_docs_userguide_ClientSession.png' alt='image: 1C__Projects_svn_trunk_hades_HadesFIXM_docs_userguide_ClientSession.png' />
</div>
<h2 class="section"><span class="section_label">1.2</span> <a id='magicparlabel-16' />
Client/Server Flow</h2>
<div class="standard"><a id='magicparlabel-17' />
There can be multiple <em>Consumer Flows</em> configured for a <em>Consumer Stream</em>. The Consumer Flows can have <em>Filters</em> configured. A default message type filter can be configured using the "msgFilter" attribute on the <em>Consumer Flow</em> in which case only the message types specified in the comma separated list will be relayed. If more complex filtering is required then a custom <em>Filter</em> can be configured. The class implementing the <em>Filter</em> functionality must implement <strong>com.marvisan.hades.fix.engine.process.stream.Filter</strong> interface. The <em>Consumer Flow</em> "msgFilterClass" attribute configures a custom filter for the flow. If N <em>Consumer Flows</em> are configured in a <em>Stream</em> then at least N - 1 <em>Filters</em> must be specified otherwise all the messages will be consumed by the first flow configured. If a message is filtered then it will be passed to the next flow configured or discarded if no <em>Consumer Flow</em> exists. The <em>Consumer Flows</em> are running in the Consumer Stream thread.</div>

<div class="standard"><a id='magicparlabel-18' />
<img src='2C__Projects_svn_trunk_hades_HadesFIXM_docs_userguide_ClientConsumerStream.png' alt='image: 2C__Projects_svn_trunk_hades_HadesFIXM_docs_userguide_ClientConsumerStream.png' />
</div>

<div class="standard"><a id='magicparlabel-19' />
A Producer Stream on the other hand can have only one Producer Flow configured.</div>

<div class="standard"><a id='magicparlabel-20' />
<img src='3C__Projects_svn_trunk_hades_HadesFIXM_docs_userguide_ClientProducerStream.png' alt='image: 3C__Projects_svn_trunk_hades_HadesFIXM_docs_userguide_ClientProducerStream.png' />
</div>
<h2 class="section"><span class="section_label">1.3</span> <a id='magicparlabel-21' />
Client/Server Handlers</h2>
<div class="standard"><a id='magicparlabel-22' />
The messages received by the <em>Consumer Flow</em> from their<em> Consumer Stream</em> are relayed to the chain of custom message <em>Handlers</em>. Handlers are the customization points of the engine. The Handlers are created for the purpose of processing incoming FIX messages and deliver them to the business layer. The last <em>Handler</em> in the configured chain is the pivot <em>Handler</em> and it is responsible with the delivery of the message to the <em>Application Layer</em> using whatever chosen technology. Any <em>Handler</em> in the chain can discard the received message if required. If the message is discarded by a <em>Handler</em> in the chain, the subsequent Handler will not receive the message and the message will not be delivered to the <em>Application Layer</em>. The <em>Handlers</em> configured in the <em>Consumer Flows</em> are running in the <em>Consumer Stream</em> thread.</div>

<div class="standard"><a id='magicparlabel-23' />
<img src='4C__Projects_svn_trunk_hades_HadesFIXM_docs_userguide_ClientConsumerFlow.png' alt='image: 4C__Projects_svn_trunk_hades_HadesFIXM_docs_userguide_ClientConsumerFlow.png' />
</div>

<div class="standard"><a id='magicparlabel-24' />
The <em>Handlers</em> configured in a <em>Producer Flow</em> will receive the messages from the <em>Application Layer</em> and deliver them to the counter-party via the fix session. The <em>Handlers</em> configured in the <em>Producer Flows</em> are running in the <em>Consumer Stream</em> thread.</div>

<div class="standard"><a id='magicparlabel-25' />
<img src='5C__Projects_svn_trunk_hades_HadesFIXM_docs_userguide_ClientProducerFlow.png' alt='image: 5C__Projects_svn_trunk_hades_HadesFIXM_docs_userguide_ClientProducerFlow.png' />
</div>

<div class="standard"><a id='magicparlabel-26' />
There are 3 types of custom Handlers that can be developed: </div>

<ol class="enumerate"><li class="enumerate_item"><a id='magicparlabel-27' />
Consumer Handler that needs to extend <strong>com.marvisan.hades.fix.engine.handler.AbstractConsumerHandler</strong> class. This handler types can only be configured inside a <em>Consumer Flow</em> and must override the "consume" method. A <em>Consumer Handler</em> implementation will have an instance created inside the <em>Consumer Stream</em> thread and will be able to create its own threads. The <em>Handler</em> implementation is responsible for managing its own created threads. In order for the processed message to be forwarded to the next message in chain the "super.consume()" method must be called before exiting the "consume" method, otherwise the message will be discarded. </li>
<li class="enumerate_item"><a id='magicparlabel-28' />
Producer Handler that needs to extend <strong>com.marvisan.hades.fix.engine.handler.AbstractProducerHandler</strong> class. This handler types can only be configured inside a <em>Producer Flow</em> and must override the "produce" method. A <em>Producer Handler</em> implementation will have an instance created inside the <em>Producer Stream</em> thread and will be able to create its own threads. The <em>Handler</em> implementation is responsible for managing the created threads. In order for the processed message to be forwarded to the next message in chain the "super.produce()" method must be called before exiting the "produce" method, otherwise the message will be discarded.</li>
<li class="enumerate_item"><a id='magicparlabel-29' />
Producer/Consumer Handler that needs to extend <strong>com.marvisan.hades.fix.engine.handler.AbstractProducerConsumerHandler</strong> class. This handler types can be configured in both Producer and Consumer Flows. The handlers will have a shared instance created in the Session Coordinator thread that will be called by the Consumer and Producer Flows. Thread safety must be taken care of for this handler type implementation as different threads will call the "consume" and "produce" methods.</li>
</ol>
<h2 class="section"><span class="section_label">1.4</span> <a id='magicparlabel-30' />
Event Model</h2>
<div class="standard"><a id='magicparlabel-31' />
HadesFIX component are reporting/consuming <strong>alerts</strong> and <strong>life cycle</strong> events. These events are relayed to the parent components: Handlers, Flows, Streams, Session Coordinator, Hades Instance. A graphical representation of the event model is depicted bellow.</div>

<div class="standard"><a id='magicparlabel-32' />
<img src='6C__Projects_svn_trunk_hades_HadesFIXM_docs_userguide_EventModel.png' alt='image: 6C__Projects_svn_trunk_hades_HadesFIXM_docs_userguide_EventModel.png' />
</div>

<div class="standard"><a id='magicparlabel-33' />
Life Cycle events are reported by all the components and are used internally by the engine. A Handler can subscribe to this type of events by registering with the Session Coordinator - <em>attachAsLifeCycleEventListener()<strong>.</strong></em></div>

<div class="standard"><a id='magicparlabel-34' />
A Handler can also receive FIX protocol level messages (Login, Logout,...) by registering with the Session Coordinator - <em>attachAsMessageEventListener().</em></div>

<div class="standard"><a id='magicparlabel-35' />
Handlers can only generate Alert messages which are relayed to the Session Coordinator and Hades Instance - <em>sendAlertEvent(AlertEvent event).</em></div>
<h1 class="part"><span class="part_label">Part II</span> <a id='magicparlabel-36' />
FIX Engine Configuration</h1>
<h1 class="chapter"><span class="chapter_label">Chapter 2</span> <a id='magicparlabel-37' />
Setting up engine configuration</h1>
<h2 class="section"><span class="section_label">2.1</span> <a id='magicparlabel-38' />
Prerequisites</h2>
<div class="standard"><a id='magicparlabel-39' />
Hades engine is highly configurable. All the configuration for a Hades instance - Java process - is hold in a configuration file. This configuration file must be specified as a java environment parameter in the script file that starts the engine. The parameter name is <em>hades.engine.config.file.</em> This parameter must contain the full OS path of the file. The directory where this file is placed is considered as a base for all the other configuration data needed. The configuration file is a XML file. Its schema is placed in the distribution archive in the <strong>docs/schema</strong> folder and it is named <em>HadesEngineConfig.xsd</em>. You will be able to validate your configuration using this XML schema file. The engine itself is doing the same thing when it starts up.</div>

<div class="standard"><a id='magicparlabel-40' />
A HadesFIX engine can run multiple FIX sessions at a time, either client or server, for each counter-party and each of them having its own FIX version. </div>

<div class="standard"><a id='magicparlabel-41' />
Secured messages and handler definitions can be specified at the engine, counter-party and session level. The settings at the counter-party level will override the settings at the engine level if using the same names. The same happens with the settings at the session level that will override the counter-party and engine level settings.</div>
<h2 class="section"><span class="section_label">2.2</span> <a id='magicparlabel-42' />
HadesFIX engine instance</h2>
<div class="standard"><a id='magicparlabel-43' />
The configuration of the engine is specified as attributes of the<em> &lt;hadesInstance&gt;</em> element of the configuration file. The configuration parameters of the engine are described bellow:</div>

<ul class="itemize"><li class="itemize_item"><a id='magicparlabel-44' />
name - instance name is a required attribute and it must be unique for each engine instance running in the network. It can be a string containing any printable character.</li>
<li class="itemize_item"><a id='magicparlabel-45' />
mgmtHost - this is the host IP address of the host on which the engine is running. Must be specified if the host has multiple network interfaces.</li>
<li class="itemize_item"><a id='magicparlabel-46' />
mgmtPort - the port on which the remote management agent is running. If not specified defaults to 33333.</li>
<li class="itemize_item"><a id='magicparlabel-47' />
mgmtUseAuth - flag indicating if the remote access to this engine management interface is protected by a password. This parameter defaults to false and as the result the management remote access<strong> it is not restricted by defaul</strong>t. If this parameter is enabled then a user name password must be created using the password bank utility. </li>
<li class="itemize_item"><a id='magicparlabel-52' />
mgmtUseSSL - flag indicating that the management interface connection must use SSL. Defaults to false.If this parameter is set to true then and mgmtKeystorePasswd config parameters will allow</li>
<li class="itemize_item"><a id='magicparlabel-53' />
mgmtKeystoreFile - path to the key store file. If not provided and <em>mgmtUseSSL</em> is set to true this parameter defaults to<strong> &ldquo;hadesfix-mgmt-key.ks&rdquo;</strong> which must be always located relative to the engine configuration directory.</li>
<li class="itemize_item"><a id='magicparlabel-54' />
mgmtKeystorePasswd - key-store password. If not provided and <em>mgmtUseSSL</em> is set to true this parameter defaults to<strong> &ldquo;hadesfix&rdquo;</strong>. This is the password entry name as it is stored in the HadesFIX engine password bank. See the HadesFIX password bank utility documentation.</li>
<li class="itemize_item"><a id='magicparlabel-55' />
mgmtUseSSLCliAuth - flag indicating that the SSL connection will use client authentication. Defaults to false. If this flag is set to true then the trust store file name and password can be configured using the following two parameters: <em>mgmtTruststoreFile</em> and <em>mgmtTruststorePasswd</em>. If this parameter is enabled then the <em>mgmtUseAuth</em> parameter is disabled.</li>
<li class="itemize_item"><a id='magicparlabel-56' />
mgmtTruststoreFile - path to the trust-store file. Must be always located relative to the engine configuration directory.</li>
<li class="itemize_item"><a id='magicparlabel-57' />
mgmtTruststorePasswd - key-store password. This is the password entry name as it is stored in the HadesFIX engine password bank. See the HadesFIX password bank utility documentation. .</li>
<li class="itemize_item"><a id='magicparlabel-62' />
clustered - this flag enable clustering for the HadesFIX servers. defaults to false.</li>
<li class="itemize_item"><a id='magicparlabel-63' />
description - textual description of the engine. Optional.</li>
</ul>
<h2 class="section"><span class="section_label">2.3</span> <a id='magicparlabel-64' />
Counter-party session configuration</h2>
<div class="standard"><a id='magicparlabel-65' />
Multiple sessions can be configured for a counter-party. The configuration for a counter-party consists of the FIX counter-party identification fields: <em>compID</em>, <em>subID</em> and <em>locationID</em>. Form these 3 the only required one is the <em>compID</em> attribute. The <em>side</em> attribute is only used when HadesFIX is used as a router. The valid values for <em>side</em> attribute are: <strong>Buy</strong>, <strong>B</strong> for buy side respectively <strong>Sell</strong>, <strong>S</strong> for the sell side.</div>
<h3 class="subsection"><span class="subsection_label">2.3.1</span> <a id='magicparlabel-66' />
TCP connection configuration</h3>
<div class="standard"><a id='magicparlabel-67' />
The server or client TCP connection data required fields by the HadesFIX engine are the <em>host</em> and <em>port</em> attributes on the <em>tcpConnection</em> element. For a server connection if <em>host</em> is specified then it must be the local bind address (hosts with multiple addresses). The other configuration attributes are optional and have default values. The optional configuration parameters set at the <em>tcpConnection</em> element level are:</div>

<ul class="itemize"><li class="itemize_item"><a id='magicparlabel-68' />
soLinger - if greater than 0 this option sets the time in seconds the socket close() method will wait for delivery of remaining packets before shutting down the connection. By default the close() method returns immediately and if soLinger is set to 0 all the remaining packets will be discarded. Defaults to the specific platform value.</li>
<li class="itemize_item"><a id='magicparlabel-69' />
tcpNodelay - this is a flag that if set to true disables buffering at the socket level ensuring that the packets are sent to the destination as soon as they are delivered to the socket regardless of their size. In the normal scenario the small packets are combined into large packets before being sent. The Nagle algorithm used when tcpNodely is disabled waits for a confirmation from the remote host before sending another packet. This might hamper the steady transfer of data between the client and the server. Defaults to false.</li>
<li class="itemize_item"><a id='magicparlabel-70' />
rxBufferSize - this sets the size of the received messages buffer. After the buffer is filled the messages will be either drooped or saved in a disk buffer, depending of the value of the parameter value. Default value is 500.</li>
<li class="itemize_item"><a id='magicparlabel-71' />
txBufferSize - this sets the size of the transmitted messages buffer. After the buffer is filled the messages will be either dropped or saved in a disk buffer, depending of the value of the parameter value. Default value is 500.</li>
<li class="itemize_item"><a id='magicparlabel-72' />
soTimeout - used to tune how many milliseconds the read method blocks waiting for data. Default value is 3 milliseconds.</li>
<li class="itemize_item"><a id='magicparlabel-73' />
soRcvbuf - size in bytes of the receive buffer. Platform specific.</li>
<li class="itemize_item"><a id='magicparlabel-74' />
soSndbuf - size in bytes of the transmission buffer. Platform specific.</li>
<li class="itemize_item"><a id='magicparlabel-75' />
sendKeepAlive - if set to true will set SO_KEEPALIVE on the socket. The default value is false.</li>
<li class="itemize_item"><a id='magicparlabel-76' />
sslData - this optional element is used in configuring TCP transport SSL values. The values for <em>keyStoreLoc</em>, <em>keyStorePasswd</em> are required. <em>keyStoreLoc </em>is always relative to the configuration directory - the directory where the instance configuration file is placed. If <em>useCliAuth </em>is set to true (default to false) then the truststore location <em>trustStoreLoc</em> together with the trust-store password <em>trustStorePasswd</em> are required. If the key password <em>keyPasswd</em> is not given it will default to <em>keyStorePasswd.</em></li>
</ul>
<div class="standard"><a id='magicparlabel-77' />
The optional configuration parameters set at the <em>clientTcpConnection</em> element level are:</div>

<ul class="itemize"><li class="itemize_item"><a id='magicparlabel-78' />
numOfRetries - (used in client side only) sets the number of connection retries attempted by the client for the configured connections in case the connection with the server fails. After the number of attempts is exhausted the connections defined in the <em>backupConnections</em> element are used to try to reconnect using the same value as number of retries. Default value is 3 reconnection attempts. If set to 0 the number of retries will be unlimited.</li>
<li class="itemize_item"><a id='magicparlabel-79' />
retrySecondsToWait - (used in client side only) is setting the number of seconds to wait until another reconnection attempt is made on the next configured connection. Default is 3 seconds.</li>
<li class="itemize_item"><a id='magicparlabel-80' />
proxyHost - proxy server host.</li>
<li class="itemize_item"><a id='magicparlabel-81' />
proxyPort - proxy server port number.</li>
<li class="itemize_item"><a id='magicparlabel-82' />
backupConnections - this element keeps a list of backup FIX connections. Each connection is defined by the host, port pair. This element is optional.</li>
</ul>
<div class="standard"><a id='magicparlabel-83' />
The configuration parameters set at the <em>serverTcpConnection</em> level are:</div>

<ul class="itemize"><li class="itemize_item"><a id='magicparlabel-84' />
name - name of the server. It must be different for each server configured on the same Hades instance.</li>
<li class="itemize_item"><a id='magicparlabel-85' />
hostsRestrictedList- comma-delimited list of IP addresses for allowed incoming connections. Counter-parties trying to connect from other IP addresses than the one configured will not be allowed to logon.</li>
</ul>
<h3 class="subsection"><span class="subsection_label">2.3.2</span> <a id='magicparlabel-86' />
Session Configuration</h3>
<h4 class="subsubsection"><span class="subsubsection_label">2.3.2.1</span> <a id='magicparlabel-87' />
Client and Server common parameters</h4>

<ul class="itemize"><li class="itemize_item"><a id='magicparlabel-88' />
compID - session comp ID. This field is required for any session.</li>
<li class="itemize_item"><a id='magicparlabel-89' />
subID - subscriber identifier that might be used to identify a session together with compID field.</li>
<li class="itemize_item"><a id='magicparlabel-90' />
locationID - location identifier that might be used to identify a session together with compID and subID fields.</li>
<li class="itemize_item"><a id='magicparlabel-91' />
rxBufferSize - the incoming messages buffer size. Defaults to 1000.</li>
<li class="itemize_item"><a id='magicparlabel-92' />
txBufferSize - the outgoing messages buffer size. Defaults to 1000.</li>
<li class="itemize_item"><a id='magicparlabel-93' />
deliverToCompID - FIX message header value used to identify the firm targeted to receive the message if the message is delivered by a third party.</li>
<li class="itemize_item"><a id='magicparlabel-94' />
deliverToSubID - FIX message header value used to identify specific message recipient if the message is delivered by a third party.</li>
<li class="itemize_item"><a id='magicparlabel-95' />
deliverToLocationID - FIX message header value used to identify specific message recipient's location if the message was delivered by a third party.</li>
<li class="itemize_item"><a id='magicparlabel-96' />
onBehalfOfCompID - FIX message header value used to identify firm originating message if the message was delivered by a third party.</li>
<li class="itemize_item"><a id='magicparlabel-97' />
messageEncoding - message encoding character set.</li>
<li class="itemize_item"><a id='magicparlabel-98' />
logonTimeout - in client side this value specifies the interval of time in seconds for which the client waits for a Logon response from the server. If this time expire the session is stopped. On the server side this parameter is only used if the <em>enableLogonPassThrough</em> parameter is set to true.</li>
<li class="itemize_item"><a id='magicparlabel-99' />
heartBtInt - interval of time after which a inactive session (that didn't sent/received any messages) will send an Heartbeat message to the Counterpary.</li>
<li class="itemize_item"><a id='magicparlabel-100' />
heartBtOffset - value on top of the <em>heartBtInt</em> that is accepted as offset before the session is restarted.</li>
<li class="itemize_item"><a id='magicparlabel-101' />
description - text description of the session configured.</li>
<li class="itemize_item"><a id='magicparlabel-102' />
disableGapDetection - disable incoming messages sequence gap detection. All the incoming messages are accepted if the sequence number is greater than expected sequence number. Out of sequence messages are discarded.</li>
<li class="itemize_item"><a id='magicparlabel-103' />
enableResendTimeout - this is a FIX non standard option that resets the sequence in the gap immediately after the resend response exceeds the <em>resendTimeout</em> value. Default is "false".</li>
<li class="itemize_item"><a id='magicparlabel-104' />
resendTimeout - the value of the timeout interval in milliseconds for the <em>enableResendTimeout</em> option. Default value is 3000 ms.</li>
<li class="itemize_item"><a id='magicparlabel-105' />
testMessageIndicator - indicates that the session is a test session. Defaults to false.</li>
<li class="itemize_item"><a id='magicparlabel-106' />
resendEndSeqNum - if specified this value will be set as the EndSeqNum on the ResendRequest message. It may be set to 0 or other custom party agreed value to indicate that all the messages to the current one should be resent.</li>
<li class="itemize_item"><a id='magicparlabel-107' />
resetSeqAtStartup - flag indicating that session sequences will be reset at start-up of the session. Defaults to "true".</li>
<li class="itemize_item"><a id='magicparlabel-108' />
resetSeqAtLogon - flag indicating that session sequences will be reset at each session login. Defaults to "false".</li>
<li class="itemize_item"><a id='magicparlabel-109' />
resetSeqAtLogout - flag indicating that session sequences will be reset at each session logout received. Defaults to "false".</li>
<li class="itemize_item"><a id='magicparlabel-110' />
resetSeqAtDisconnect - flag indicating that session sequences will be reset at each transport disconnection. Defaults to "false".</li>
<li class="itemize_item"><a id='magicparlabel-111' />
validateIncomingFIXML - turns the FIXML schema validation on for all incoming messages. Defaults to "false".</li>
<li class="itemize_item"><a id='magicparlabel-112' />
validateOutgoingFIXML - turns the FIXML schema validation on for all outgoing messages. Defaults to "false".</li>
<li class="itemize_item"><a id='magicparlabel-113' />
abortFIXMLValidationOnError - stops the validation on error and throws a validation error message.</li>
</ul>
<h4 class="subsubsection"><span class="subsubsection_label">2.3.2.2</span> <a id='magicparlabel-114' />
Server specific parameters</h4>

<ul class="itemize"><li class="itemize_item"><a id='magicparlabel-115' />
enableLogonPassThrough - Logon messages are passed to the business application which is responsible with authentication and generation of the Logon response message.</li>
</ul>
<h4 class="subsubsection"><span class="subsubsection_label">2.3.2.3</span> <a id='magicparlabel-116' />
Client specific parameters</h4>

<ul class="itemize"><li class="itemize_item"><a id='magicparlabel-117' />
maxNumLogonRetries - when this parameter is greater than 0 it specifies the maximum number of logon attempts that will be performed by the FIX session. The session will be disconnected after this value is reached. Default value of 0 means there is no limit on the number of logon attempts.</li>
<li class="itemize_item"><a id='magicparlabel-118' />
doNotReconnWhenSeqNumTooLow - if this parameter is set to false, the client will stop making outbound logon attempts if a logon fails with &ldquo;Sequence Numbers too low&rdquo; error. Defaults to "false".</li>
<li class="itemize_item"><a id='magicparlabel-119' />
connectOnStartup - the Session Coordinator will attempt to initiate a connection with the counter-party when it is started. Defaults to "true".</li>
<li class="itemize_item"><a id='magicparlabel-120' />
reconnectDelay - if a session connection fails this value in milliseconds is used as a delay before Session Coordinator retries again. Defaults to 10000 (10 seconds).</li>
</ul>
<h1 class="part"><span class="part_label">Part III</span> <a id='magicparlabel-121' />
FIX Object Model</h1>
<div class="standard"><a id='magicparlabel-122' />
HadesFIX object model class diagram is depicted bellow. For simplicity only the NewOrderSingleMsg class is shown. All the FIX messages are inheriting from the FIXMsg class ad has to implement a contract in order to be encoded and decoded.</div>

<div class="standard"><a id='magicparlabel-123' />
<img src='7C__Projects_svn_trunk_hades_HadesFIXM_docs_userguide_FIXMessage.png' alt='image: 7C__Projects_svn_trunk_hades_HadesFIXM_docs_userguide_FIXMessage.png' />
</div>

<div class="standard"><a id='magicparlabel-124' />
The FIX Components and Groups class diagrams as shown bellow.</div>

<div class="standard"><a id='magicparlabel-125' />
<img src='8C__Projects_svn_trunk_hades_HadesFIXM_docs_userguide_GroupsComponents.png' alt='image: 8C__Projects_svn_trunk_hades_HadesFIXM_docs_userguide_GroupsComponents.png' />
</div>

<div class="standard"><a id='magicparlabel-126' />
Message creation is using factories. Obtaining a new message is a matter of calling:</div>

<div class="standard"><a id='magicparlabel-127' />
</div>
<div class='float float-listings'><pre>NewOrderSingleMsg msg = (NewOrderSingleMsg) FIXMsgBuilder.build(MsgType.NewOrderSingle.getValue(), BeginString.FIX_4_4);</pre></div>


<div class="standard"><a id='magicparlabel-132' />
The call will create a NewOrderSingle FIX message for the FIX version 4.4. The Components and Groups for this release will not be pre-populated. It is the responsibility of the user to populate them. After the object is populate calling the <em>encode()</em> method on the message will return a byte array representation of the FIX message.</div>

<div class="standard"><a id='magicparlabel-133' />
Obtaining an Object message from the FIX encoded byte array can be obtain from the same factory by calling:</div>

<div class="standard"><a id='magicparlabel-134' />
</div>
<div class='float float-listings'><pre>NewOrderSingleMsg dmsg = (NewOrderSingleMsg) FIXMsgBuilder.build(byte[] fixMsg);</pre></div>


<div class="standard"><a id='magicparlabel-139' />
Only the header fields will be decoded. In order to have all the message decoded the <em>decode()</em> message must be called on the fix message.</div>

<div class="standard"><a id='magicparlabel-140' />
The class diagram for the message factory is shown bellow.</div>

<div class="standard"><a id='magicparlabel-141' />
<img src='9C__Projects_svn_trunk_hades_HadesFIXM_docs_userguide_MessageFactory.png' alt='image: 9C__Projects_svn_trunk_hades_HadesFIXM_docs_userguide_MessageFactory.png' />
</div>

<div class="standard"><a id='magicparlabel-142' />
HadesFIX allows for the extension of the FIX model in order to cater for custom tags and custom messages. The mechanism used to extend the custom tags and messages is presented bellow.</div>
<h1 class="chapter"><span class="chapter_label">Chapter 3</span> <a id='magicparlabel-143' />
Custom tags and message handling</h1>
<div class="standard"><a id='magicparlabel-144' />
Custom tags are supported in two ways. </div>

<ul class="itemize"><li class="itemize_item"><a id='magicparlabel-145' />
The first method is to use the Map of custom messages that is contained in the <strong>com.marvisan.hades.fix.message.FIXMsg</strong> super-class. This class has methods to add, retrieve and remove custom tags from the message custom map. The <em>getCustomTag, addCustomTag, removeCustomTag </em>and <em>clearCustomTags </em>methods (see javadoc) can be used to manage the custom tags set for encoding or decoded. The limitation of this methods is that all the custom tags values must be represented as a java.lang.String class.</li>
<li class="itemize_item"><a id='magicparlabel-146' />
The second method is overwriting the HadesFIX message implementation and adding to the extended message all the custom tags, groups and components required. The overriding mechanism requires, apart of the overriding class message implementation, the writing of a custom message factory class which must be configured in a property file. This is also the mechanism used to create custom messages. The next section describes how to extend or write a new FIX message.</li>
</ul>
<h2 class="section"><span class="section_label">3.1</span> <a id='magicparlabel-147' />
Writing a custom message</h2>
<div class="standard"><a id='magicparlabel-148' />
Writing a custom new message requires the following steps:</div>
<h3 class="subsection"><span class="subsection_label">3.1.1</span> <a id='magicparlabel-149' />
Create a new message class that extends com.marvisan.hades.fix.message.FIXMsg</h3>
<div class="standard"><a id='magicparlabel-150' />
All HadesFIX messages are extending <strong>com.marvisan.hades.fix.message.FIXMsg </strong>class that in its turns extends the <strong>com.marvisan.hades.fix.message.Fragment</strong> class. The abstract interface is defined in the Fragment class (see javadoc for further explanations). The contracts defined by the Fragment class contains</div>

<ul class="itemize"><li class="itemize_item"><a id='magicparlabel-151' />
methods that return the FIX tags in the message/component/group : <em>getFragmentTags(), getFragmentAllTags(), getFragmentDataTags(), getFragmentCompTags(), getFragmentSecuredTags()</em></li>
<li class="itemize_item"><a id='magicparlabel-152' />
method to validate a FIX message/component/group:<em> validateRequiredTags() throws TagNotPresentException</em></li>
<li class="itemize_item"><a id='magicparlabel-153' />
methods to set the tag value when the FIX message/component/group is decoded from the byte array: <em>setFragmentTagValue(Tag tag), setFragmentCompTagValue(Tag tag, ByteBuffer message), setFragmentDataTagValue(Tag tag, ByteBuffer message)</em></li>
<li class="itemize_item"><a id='magicparlabel-154' />
methods to encode the FIX object message/component/group in a wire FIX message: <em>encodeFragmentAll(), encodeFragmentSecured(boolean secured)</em></li>
</ul>
<div class="standard"><a id='magicparlabel-155' />
When extending an existing message these methods might need to be implemented. If pre FIX4.4 version message encryption is used then the appropriate secured related methods need to be implemented too.</div>
<h3 class="subsection"><span class="subsection_label">3.1.2</span> <a id='magicparlabel-156' />
Create enclosed components and groups</h3>
<div class="standard"><a id='magicparlabel-157' />
Component classes need to extend the abstract <strong>com.marvisan.hades.fix.message.component.Component </strong>class. this class extends also the Fragment class and must satisfy the contract defined by this class. Further the Component class define a supplementary interface method <em>getFirstTag() </em>that needs to return the first tag in a repeating component/group.</div>

<div class="standard"><a id='magicparlabel-158' />
Repeating groups need to extend the <strong>com.marvisan.hades.fix.message.group.Group </strong>class. Group class extends the Component class and has the same contract to be fulfilled. The subtle difference between the two sits only in the fact that a component might not be and by the FIX protocol standard allows the fields in the component to be &ldquo;scattered&rdquo; all over the message.</div>
<h3 class="subsection"><span class="subsection_label">3.1.3</span> <a id='magicparlabel-159' />
Create a custom factory class</h3>
<div class="standard"><a id='magicparlabel-160' />
HadesFIX messages are encoded/decoded using a generic message factory <strong>com.marvisan.hades.fix.message.builder.FIXMsgBuilder</strong>. The generic message factory uses message builders for each of the FIX messages. A FIX message builder class must extend <strong>com.marvisan.hades.fix.message.builder.MsgBuilder</strong> class and implement the abstract interface defined by that class. The method to implement are <em>build(MsgVersionType msgType, byte[] message)</em> for decoding a message and <em>build(BeginString version, ApplVerID applVerID)</em> for building an empty FIX message used for encoding. Please bear in mind that the message builder class must be thread safe. See javadoc for supplementary information</div>
<h3 class="subsection"><span class="subsection_label">3.1.4</span> <a id='magicparlabel-161' />
Make the class visible to the FIXMsgBuilder</h3>
<div class="standard"><a id='magicparlabel-162' />
FIXMsgBuilder class can be configured at run-time or using a configuration file placed in the root classspath named <em>HadesMsgBuilderClasses.properties. </em>An example of message builder configuration would be:</div>

<div class="standard"><a id='magicparlabel-163' />
</div>
<div class='float float-listings'><pre># Example HadesMsgBuilderClasses.properties file (see samples)
AZ=com.marvisan.hades.fix.sample.message.builder.CustomNewMessageBuilder</pre></div>


<div class="standard"><a id='magicparlabel-169' />
This file contains entries made from the message type and the message builder implementation class that.</div>

<div class="standard"><a id='magicparlabel-170' />
It is possible to have multiple <em>HadesMsgBuilderClasses.properties</em> files placed in different locations. In order for this files to be recognized by the run-time a System property named <strong>hades.model.build.file.location</strong> must be set. This property contains a colon separated list of packages that contain the custom message builder config file </div>

<div class="standard"><a id='magicparlabel-171' />
E.g. -Dhades.model.build.file.location=com.marvisan.hades.fix.sample.builder1:com.marvisan.hades.fix.sample.builder2</div>

<div class="standard"><a id='magicparlabel-172' />
The files must contain builders for different messages as the later loaded files will override the previous settings obviously.</div>

<div class="standard"><a id='magicparlabel-173' />
FIXMsgBuilder can also be setup at run-time using the following methods: <em>addMsgBuilder(String msgType, MsgBuilder builder), addMsgBuilders(Map&lt;String, MsgBuilder&gt; builders), </em>and <em>clearMsgBuilder(String msgType). </em>See javadoc for further information.</div>
<h3 class="subsection"><span class="subsection_label">3.1.5</span> <a id='magicparlabel-174' />
Add JAXB annotations to the class (only if FIXML support is required)</h3>
<div class="standard"><a id='magicparlabel-175' />
FIXML support in <strong>HadesFIX</strong> is done using JAXB. The class message together with enclosed components and group must be annotated in order to have XML generated. At this point schema validation of the messages for inbound/outbound messages is supported. Schema validation is done using standard FIXML schema files which are stored in FIXMLSchema.jar. In order to be able to validate your messages you need to add your custom message schema data to the existing FIXML schema files. The sample message <strong>com.marvisan.hades.fix.sample.message.CustomNewMsg</strong> offer a good starting point for using annotations to create custom FIXML messages.</div>
<h3 class="subsection"><span class="subsection_label">3.1.6</span> <a id='magicparlabel-176' />
Make the packages holding messages/components/groups visible to the FIXMLBuilder</h3>
<div class="standard"><a id='magicparlabel-177' />
This is done by using a configuration file placed in the root classspath named <em>HadesJAXBPackages.properties. </em>The format of this file has as a key the <em>ApplVerID</em> number and the value is the colon separated list of packages containing the classes part of the FIXML message. An example file would look like:</div>

<div class="standard"><a id='magicparlabel-178' />
</div>
<div class='float float-listings'><pre># File entries format is ApplVerId=colon separated packages
6=com.marvisan.hades.fix.sample.message:com.marvisan.hades.fix.sample.message.group</pre></div>

<h1 class="chapter"><span class="chapter_label">Chapter 4</span> <a id='magicparlabel-184' />
Writing a Handler</h1>
<div class="standard"><a id='magicparlabel-185' />
In order for the HadesFIX engine to work it will need custom message handlers to be written. The class diagram for HadesFIX handlers is depicted bellow.</div>

<div class="standard"><a id='magicparlabel-186' />
<img src='10C__Projects_svn_trunk_hades_HadesFIXM_docs_userguide_Handler.png' alt='image: 10C__Projects_svn_trunk_hades_HadesFIXM_docs_userguide_Handler.png' />
</div>

<div class="standard"><a id='magicparlabel-187' />
Each of the 3 types of Handlers: Consumer, Producer and ConsumerProducer have corresponding Abstract classes from which they must inherit. </div>

<div class="standard"><a id='magicparlabel-188' />
The life cycle of the Handler is controlled by the engine. There are 3 methods that are called by the engine. At the creation time the default constructor is used to create the Handler. Immediatelly after the Flow calls the <strong>init()</strong> method. If custom initialisation is necessary then the <strong>init()</strong> method can be overwritten with the custom implementation. When the session is closed the <strong>close()</strong> method is called and if needed the method can be overwritten. The default implementations of these 2 methods do nothing. </div>

<div class="standard"><a id='magicparlabel-189' />
The third method is the most important one and must be overwritten: <strong>consume()</strong> for a Consumer Handler, <strong>produce()</strong> for a Producer Handler and both <strong>consume() and produce()</strong> for a ConsumerProducer Handler. This methods are called by the engine every time a message is relayed through the Handlers chain. The custom implementation must call the super-class same method if the message is to be passed to the next handler in chain.</div>

<div class="standard"><a id='magicparlabel-190' />
If the Handler needs to receive engine Life Cycle events or protocol messages then the handler must register itself with the Session Coordinator by calling <em>attachAsLifeCycleEventListener() / attachAsMessageEventListener().</em></div>

<div class="standard"><a id='magicparlabel-191' />
The Handler can send alerts to the Session Coordinator by calling <em>sendAlertEvent()</em>.</div>

<div class="standard"><a id='magicparlabel-192' />
Configured parameters are retrieved by using <em>getParameters()</em> method that returns a Map populated with the Handler parameters.</div>

<div class="standard"><a id='magicparlabel-193' />
A Handler can be temporarily disabled. A disabled Handler is &ldquo;skipped&rdquo; and the message is passed to the next Handler in chain.</div>

<div class="standard"><a id='magicparlabel-194' />
If a received message needs to be rejected at the FIX session level then the Handler must throw a <strong>com.marvisan.hades.fix.engine.exception.HandlerException</strong> exception. The exception message text will fill the <em>Text</em> field in the FIX Reject message.</div>
<h1 class="chapter"><span class="chapter_label">Chapter 5</span> <a id='magicparlabel-195' />
FIXML Support</h1>
<div class="standard"><a id='magicparlabel-196' />
HadesFIX supports FIXML starting with FIX version 4.4. FIXML encoding/decoding is done at this point using JAXB. In order for a FIX message to be encoded in FIXML the<em> toFixml()</em> method must be called on the FIX message. The method will return the FIXML message representation of the FIX message as a String object. </div>

<div class="standard"><a id='magicparlabel-197' />
To decode a FIXML message <em>fromFixml()</em> method must be called of the FIX message. It is assumed that the message type is the same as the FIXML message string passed as a parameter. In order to improve performance the FixmlCoded instance is stored in the <em>ThreadLocal</em> context. The FIXML encoding/decoding options (validation, error behavior, XML printable format) are in this case set using the <em>SessionContext</em> thread local object. (See javadoc for <strong>com.marvisan.hades.fix.message.config.SessionContext</strong> and <strong>com.marvisan.hades.fix.message.config.SessionContextKey</strong> classes ).</div>

<div class="standard"><a id='magicparlabel-198' />
Another way of creating FIXML messages is to use the <em>FixmlCodec</em> class directly (see <strong>com.marvisan.hades.fix.message.xml.codec.FixmlCodec</strong> interface javadoc). To obtain a code instance it is easy, all you need is: </div>

<div class="standard"><a id='magicparlabel-199' />
</div>
<div class='float float-listings'><pre>ServiceLoader&lt;FixmlCodec&gt; codec = ServiceLoader.load(FixmlCodec.class);</pre></div>


<div class="standard"><a id='magicparlabel-204' />
In this case you will need to cache yourself the <em>FixmlCodec</em> instance and set the desired encoding/decoding parameters. The FixmlCodec implementation is thread safe. In order to encode a message you will need to call the <em>marshall() </em>method passing the FIX message as parameter. The returned String object will contain the FIXML message. </div>

<div class="standard"><a id='magicparlabel-205' />
To decode a message call the<em> unmarshall()</em> method. The first parameter is the FIXML String object. The second parameter is the FIX message and it is optional. If the second parameter is provided then the message object will have the values populated from the FIXML data and returned as result. If second parameters is set to null then this method will create a new FIX message object and populate it with the FIXML data.</div>

<div class="standard"><a id='magicparlabel-206' />
AN example of FIX message supporting XML can be found in distribution <strong>sample</strong> directory.</div>

<div class="standard"><a id='magicparlabel-207' />
Batch messages support is achieved by using a surrogate FIX message : <strong>com.marvisan.hades.fix.message.BatchSetMsg</strong></div>

<div class="standard"><a id='magicparlabel-208' />
This message class can only be used in a FIXML context. FIX encoding/decoding of this message will fail.</div>

<div class="standard"><a id='magicparlabel-209' />
Obtaining an instance of the class for a specific FIX version is done as per normal:</div>

<div class="standard"><a id='magicparlabel-210' />
</div>
<div class='float float-listings'><pre>BatchSetMsg batchSet = (BatchSetMsg) FIXMsgBuilder.build(MsgType.BatchSet.getValue(), BeginString.FIX_4_4);</pre></div>


<div class="standard"><a id='magicparlabel-215' />
BatchSetMsg is a wrapper for a collection of Batch objects. Batch objects are modeled as FIX components (see <strong>com.marvisan.hades.fix.message.comp.Batch</strong>). Batch component contains a collection of FIX messages and an optional Header for the containing messages.</div>

<div class="standard"><a id='magicparlabel-216' />
After populating the BatchSet message with Batch components encoding to FIXM/decoding from FIXML uses the same mechanism as described above. </div>
<h1 class="chapter"><span class="chapter_label">Chapter 6</span> <a id='magicparlabel-217' />
Scheduler</h1>
<div class="standard"><a id='magicparlabel-218' />
The HadesFIX scheduler runs in the same process as the engine and only manages of the instance is running in. Scheduled tasks can be configured at the instance and session level. The scheduler is activated when an entry is present in the configuration file at the instance level (see configuration schema for details): </div>

<div class="standard"><a id='magicparlabel-219' />
</div>
<div class='float float-listings'><pre>&lt;scheduler&gt; 	
	&lt;calendars /&gt;      
&lt;/scheduler&gt;</pre></div>


<div class="standard"><a id='magicparlabel-226' />
The configuration above enable the scheduler only. In order to have date exclusions calendar entries are required. A calendar entry allows the definition of a set of dates that will disable the execution of tasks that refers that calendar entry. An example of calendar exclusion is shown bellow: </div>

<div class="standard"><a id='magicparlabel-227' />
</div>
<div class='float float-listings'><pre>&lt;calendars&gt;              	
	&lt;calendar name="PublicHolidays"&gt;                  		
		&lt;excludes&gt;                      			
			&lt;date dayOfMonth="1" month="3" year="2011" /&gt; 			
			&lt;date dayOfMonth="25-27" month="12" year="2011" /&gt;                 		
		&lt;/excludes&gt;              	
	&lt;/calendar&gt;          
&lt;/calendars&gt;</pre></div>


<div class="standard"><a id='magicparlabel-239' />
Calendar name attribute is required and will be referenced from the schedule task configuration if needed. </div>

<div class="standard"><a id='magicparlabel-240' />
A schedule task can be defined at the instance and session level. If the task is defined at the instance level and the task operates on a session then extra parameters are required in order to identify the session it will operate on. An example schedule set of tasks defined at the instance level is presented bellow: </div>

<div class="standard"><a id='magicparlabel-241' />
</div>
<div class='float float-listings'><pre>&lt;tasks&gt;              	
	&lt;task name="SHUTDOWN" taskType="shutdown"&gt;                  		
		&lt;date dayOfWeek="2-6" year="2011" hour="23" minute="30" /&gt; 	
	&lt;/task&gt; 	
	&lt;task name="STOP_SESSION" taskType="stop"&gt;                  		
		&lt;date dayOfWeek="2-6" hour="17" minute="30" /&gt;                  		
		&lt;taskParams&gt; 			
			&lt;taskParam name="cptyAddress" value="CLIENT" /&gt; 			
			&lt;taskParam name="sessAddress" value="SERVER" /&gt;                  		
		&lt;/taskParams&gt;              	
	&lt;/task&gt; 	
	&lt;calendars&gt; 		
		&lt;calendarRef name="PublicHolidays" /&gt; 	
	&lt;/calendars&gt; 
&lt;/tasks&gt;</pre></div>


<div class="standard"><a id='magicparlabel-260' />
Of course the task parameters for STOP_SESSION schedule are not required if the task would have been defined at the session level.</div>

<div class="standard"><a id='magicparlabel-261' />
A task definition has a required name. The name must be unique across all the engine tasks. Task type is one of the following key words: </div>

<dl class='description'><dt class="description_label">start</dt>
<dd class="description_item"><a id='magicparlabel-262' />
 - starts a stopped (shutdown) session </dd>
<dt class="description_label">stop</dt>
<dd class="description_item"><a id='magicparlabel-263' />
 - stops a running session and destroys all the memory structures for that session</dd>
<dt class="description_label">freeze</dt>
<dd class="description_item"><a id='magicparlabel-264' />
 - freezes an active session thaw - </dd>
<dt class="description_label">thaws</dt>
<dd class="description_item"><a id='magicparlabel-265' />
 an already frozen session connect - </dd>
<dt class="description_label">connects</dt>
<dd class="description_item"><a id='magicparlabel-266' />
 the transport of an initiator (buy side) session that was previously disconnected </dd>
<dt class="description_label">disconnect</dt>
<dd class="description_item"><a id='magicparlabel-267' />
 - disconnects the transport of a session </dd>
<dt class="description_label">reset</dt>
<dd class="description_item"><a id='magicparlabel-268' />
 - resets the expected sequence numbers of a session to 1. Sends a Logon message with ResetSeqNumFlag field set to true to the counter-party </dd>
<dt class="description_label">shutdown</dt>
<dd class="description_item"><a id='magicparlabel-269' />
 - shuts down the HadesFIX instance gracefully </dd>
</dl>
<div class="standard"><a id='magicparlabel-270' />
The task parameters names are at this point the following values: </div>

<ul class="itemize"><li class="itemize_item"><a id='magicparlabel-271' />
cptyAddress - counter-party address in the format compID.subID.LocationID </li>
<li class="itemize_item"><a id='magicparlabel-272' />
sessAddress - session address in the format compID.subID.LocationID </li>
</ul>
<h1 class="part"><span class="part_label">Part IV</span> <a id='magicparlabel-273' />
Utilities</h1>
<h1 class="chapter"><span class="chapter_label">Chapter 7</span> <a id='magicparlabel-274' />
Password Bank Utility</h1>
<div class="standard"><a id='magicparlabel-275' />
The Password Bank utility is used by the HadesFIX engine as an encrypted password store. All the passwords used in configuring the engine are stored in this password container and referenced by an entry name.</div>

<div class="standard"><a id='magicparlabel-276' />
The utility application that manages the password store is located in the bin directory and can be run by typing passwdbank.cmd/passwdbank.sh in a command shell window. The <strong>pwdbank&gt;</strong> prompt shell is displayed. </div>

<div class="standard"><a id='magicparlabel-277' />
Use <strong>help</strong> command to get all the available commands and <strong>help &lt;command_name&gt;</strong> for help regarding a specific command.</div>

<div class="standard"><a id='magicparlabel-278' />
One of the first steps in setting up the HadesFIX engine is to create a password bank file. This is achieved by using the Password Bank application <em>new</em> command. The <em>new</em> command will create a new password bank file named <strong>password.bank</strong> which will be saved in the same directory where the passwdbank command/shell is run. This file must be placed in the same directory where the Hades engine configuration file is located. <em>Do not change the name of the file</em>!!! </div>

<div class="standard"><a id='magicparlabel-279' />
If an existing file password bank file exists it will be backed up in a file with extension yyyymmddhhmmss. </div>

<div class="standard"><a id='magicparlabel-280' />
Adding an entry to the password bank is a matter of running the <em>add</em> command. E.g. <strong>add test password</strong> This will create an entry with the name test and the password set as password. From now on the HadesFIX config file the password will be referenced by the entry name. </div>

<div class="standard"><a id='magicparlabel-281' />
To list all the entries in the password store the list command can be used. </div>

<div class="standard"><a id='magicparlabel-282' />
To check a password bank entry the check command can be used. E.g <strong>check test password</strong> will return "Matches the store value" message if the password value matches. The message returned for a password that does not match the password bank password is "Does not match the store value". </div>

<div class="standard"><a id='magicparlabel-283' />
Removing a password from the password bank is done by running the remove command. E.g <strong>remove test</strong> will remove the password with the password bank entry name test.</div>
<h1 class="chapter"><span class="chapter_label">Chapter 8</span> <a id='magicparlabel-284' />
Management Console Application</h1>
<div class="standard"><a id='magicparlabel-285' />
The management console application allows the management of multiple HadesFIX instances. It also provides one point entry screen able to display the alerts generated by all the managed engines. Configuration data is saved in a file that can be made known to the application by specifying it using a java environment entry passed on the command line: -Dhades.engine.config.file=PATH_TO_YOUR_CONFIG_FILE. If the environment entry is not specified then the application will create a configuration file named: <em>HadesAdminConfig.xml</em> and it will place this file in the directory where the Management Console has been started.</div>

<div class="standard"><a id='magicparlabel-286' />
The application contains 4 frames as show bellow. </div>

<ol class="enumerate"><li class="enumerate_item"><a id='magicparlabel-287' />
The first frame, &ldquo;Configured Connections&rdquo; displays the configured connections created and saved in the config file and the status of the connection. The &ldquo;Engine Name&rdquo; and &ldquo;Engine Description&rdquo; columns are populated with the values retrieved from the engine.</li>
<li class="enumerate_item"><a id='magicparlabel-288' />
Bellow the &ldquo;Configured Connections&rdquo; is the &ldquo;Session Information&rdquo; frame. It displays the Counter-party and Party addresses as well as the type of session (Buy/Sell), session transmission and receive sequence number and the status of the session. </li>
<li class="enumerate_item"><a id='magicparlabel-289' />
The frame bellow the &ldquo;Session Information&rdquo; is the &ldquo;Session Events&rdquo; frame. It displays for now only the alerts generated by the engines</li>
<li class="enumerate_item"><a id='magicparlabel-290' />
The last frame is the &ldquo;Session Statistics&rdquo; frame which display message statistics</li>
</ol>
<div class="standard"><a id='magicparlabel-291' />
<img src='11C__Projects_svn_trunk_hades_HadesFIXM_docs_userguide_consoleConnMenu.png' alt='image: 11C__Projects_svn_trunk_hades_HadesFIXM_docs_userguide_consoleConnMenu.png' />
</div>
<h2 class="section"><span class="section_label">8.1</span> <a id='magicparlabel-292' />
Creating a connection to a HadesFIX engine</h2>
<div class="standard"><a id='magicparlabel-293' />
To create a new connection to a configured engine select from &ldquo;Connection&rdquo; menu &ldquo;Create&rdquo; option. The &ldquo;Engine Connection Info&rdquo; dialog is displayed as shown bellow. The Host and TCP Port number correspond to the HadesFIX engine location and must be filled. </div>

<div class="standard"><a id='magicparlabel-294' />
By checking the &ldquo;Authentication Enabled&rdquo; check box the SASL authentication mechanism is enabled. The user name is the entry name stored in the Password Bank (see password bank utility) for the password used for authentication. On the engine side the &ldquo;mgmtUseAuth&rdquo; Hades instance attribute must be set to "true" and an entry must exist in the engine Password Bank with the user name and password as set on the Management Console.</div>

<div class="standard"><a id='magicparlabel-295' />
If the security requirements are tighter then SSL can be employed (the SASL authentication mechanism sends the password unencrypted across the connection). If SSL is enabled then the &ldquo;Trust-store Location&rdquo; must be provided and the Key/Trusts-tore password must be filled. The password it is not the actual password but its entry name in the Password Bank. On the engine side the SSL must be using the Hades instance attributes:</div>

<div class="standard"><a id='magicparlabel-296' />
</div>
<div class='float float-listings'><pre>mgmtUseSSL="true"
mgmtKeystoreFile="server.keystore" 
mgmtKeystorePasswd="mgmtuser"</pre></div>


<div class="standard"><a id='magicparlabel-303' />
SSL Client Authentication could be used in which case the key-store location must be provided. It is considered that both trust and key stores have the same password. On the engine side the corresponding attributes on the Hades instance must be added:</div>

<div class="standard"><a id='magicparlabel-304' />
</div>
<div class='float float-listings'><pre>mgmtTruststoreFile="server.truststore" 
mgmtTruststorePasswd="mgmtuser" 
mgmtUseSSLCliAuth="true"</pre></div>


<div class="standard"><a id='magicparlabel-311' />
If it is desirable for the connection to be started when the Admin Console starts then the &ldquo;Connect At Startup&rdquo; check box must be checked.</div>

<div class="standard"><a id='magicparlabel-312' />
The &ldquo;Display Color&rdquo; is used as foreground color for the text displayed for the created connection.</div>

<div class="standard"><a id='magicparlabel-313' />
If the HadesFIX instance is running then the connection setup can be tested using the &ldquo;Test Connection&rdquo; button. The &ldquo;Save&rdquo; button saves the configured connection in the local configuration file. &ldquo;Cancel&rdquo; is of course discarding all the changes made.</div>

<div class="standard"><a id='magicparlabel-314' />
<img src='12C__Projects_svn_trunk_hades_HadesFIXM_docs_userguide_consoleCreateConnection.png' alt='image: 12C__Projects_svn_trunk_hades_HadesFIXM_docs_userguide_consoleCreateConnection.png' />
</div>
<h2 class="section"><span class="section_label">8.2</span> <a id='magicparlabel-315' />
Configured Connections Frame</h2>
<div class="standard"><a id='magicparlabel-316' />
This frame displays and manages the configured engine connections and the status of the connection to the engine. A contextual menu is displayed when right click on a entry with multiple options, enabled or disabled based on the status of the connection. The connection contextual menu options are:</div>

<ul class="itemize"><li class="itemize_item"><a id='magicparlabel-317' />
Edit - this option is only available if the engine connection is disconnected. It will launch the <em>Engine Connection Info</em> dialog allowing for the connection parameters to be viewed/changed.</li>
<li class="itemize_item"><a id='magicparlabel-318' />
Delete - deletes the connection from the Console permanently. This option is available only if the engine connection is disconnected. </li>
<li class="itemize_item"><a id='magicparlabel-319' />
Connect - connects the Management Console to the HadesFIX engine. Available for a disconnected connection.</li>
<li class="itemize_item"><a id='magicparlabel-320' />
Disconnect - for a established connection will disconnect the Management Console from the HadesFIX engine</li>
<li class="itemize_item"><a id='magicparlabel-321' />
Session Info - this option available only for a established connection will populate the <em>Session Information</em> frame with the engine sessions information</li>
<li class="itemize_item"><a id='magicparlabel-322' />
Shutdown - shuts down the HadesFIX engine waiting for all the messages to be cleared from queues</li>
<li class="itemize_item"><a id='magicparlabel-323' />
Shutdown Now - shuts down the HadesFIX engine destroying all the existing data not delivered to the counter-parties</li>
</ul>
<h2 class="section"><span class="section_label">8.3</span> <a id='magicparlabel-324' />
Session Information Frame</h2>
<div class="standard"><a id='magicparlabel-325' />
<em>Session Information Frame </em>manages the sessions running on a HadesFIX instance. A HadesFIX session can be in a couple of different states described as follows:</div>

<dl class='description'><dt class="description_label">ACTIVE</dt>
<dd class="description_item"><a id='magicparlabel-326' />
 - Session is logged in and exchanges messages in sync</dd>
<dt class="description_label">INACTIVE</dt>
<dd class="description_item"><a id='magicparlabel-327' />
 - Session is not logged in to the counter-party but is created</dd>
<dt class="description_label">DISCONNECTED</dt>
<dd class="description_item"><a id='magicparlabel-328' />
 - The transport layer has been disconnected manually</dd>
<dt class="description_label">FROZEN</dt>
<dd class="description_item"><a id='magicparlabel-329' />
 - Session is logged in to the counter-party but is in a state that only responds to Heartbeat and TestRequest messages received from the counter-party. All the other messages are rejected.</dd>
<dt class="description_label">SHUTDOWN</dt>
<dd class="description_item"><a id='magicparlabel-330' />
 - The session is not running (not in the memory anymore)</dd>
</dl>
<div class="standard"><a id='magicparlabel-331' />
The contextual menu is displayed when right click on a session (see below). The contextual menu options are enabled/disabled based on the session status. The session contextual menu options are:</div>

<ul class="itemize"><li class="itemize_item"><a id='magicparlabel-332' />
Refresh - Updates the current session Status and receive/transmit sequence numbers. This option is available in all the session states.</li>
<li class="itemize_item"><a id='magicparlabel-333' />
Transport Disconnect - Disconnects the transport layer. This will work different on the Sell compare with Buy engine session type. 

<ul class="itemize"><li class="itemize_item"><a id='magicparlabel-334' />
For a Sell session the TCP server worker will be shutdown but the session state will be preserved. When the Buy side reconnects it will continue the normal flow of messages assuming it has kept its session state</li>
<li class="itemize_item"><a id='magicparlabel-335' />
For a Buy session the TCP client will be shutdown. The client can reconnect automatically if configured to do so or may be reconnected manually. In both cases the session state is preserved.</li>
</ul>
</li><li class="itemize_item"><a id='magicparlabel-336' />
Transport Connect - Attempts to manually connect a disconnected transport. The option is only available in DISCONNECTED state.</li>
<li class="itemize_item"><a id='magicparlabel-337' />
Sequence Reset - Sends a SequenceReset message to the counter-party. Prior the Rx sequence number must be set to a sequence number greater than the current sequence. If the request is successful the remote session Tx sequence number is synchronize to the value of the local set Rx sequence number. The option is available only in ACTIVE state.</li>
<li class="itemize_item"><a id='magicparlabel-338' />
Session Reset - Sends a Login reset message that resets both Rx and Tx sequence numbers to 1. The option is available only in ACTIVE state.</li>
<li class="itemize_item"><a id='magicparlabel-339' />
Froze - Sets the current session in FROZEN state. All the messages other then Heartbeat and TestRequest are rejected by a Reject message sent back to the Counter-party. The option is available only in ACTIVE state.</li>
<li class="itemize_item"><a id='magicparlabel-340' />
Thaw - Unset the FROZEN state of the session and resume the normal message flow. The option is available only in FROZEN state.</li>
<li class="itemize_item"><a id='magicparlabel-341' />
Stop - Kills the selected session and destroys all the data structures of this session. The option is available only in ACTIVE state.</li>
<li class="itemize_item"><a id='magicparlabel-342' />
Start - Starts a session that has been killed manually or died unexpectedly. The option is available only in SHUTDOWN state.</li>
<li class="itemize_item"><a id='magicparlabel-343' />
Session Stats - Populates the <em>Session Statistics </em>frame with session data since the session has been started.</li>
</ul>
<div class="standard"><a id='magicparlabel-344' />
<img src='13C__Projects_svn_trunk_hades_HadesFIXM_docs_userguide_consoleSessMenu.png' alt='image: 13C__Projects_svn_trunk_hades_HadesFIXM_docs_userguide_consoleSessMenu.png' />
</div>

<div class="standard"><a id='magicparlabel-345' />
An snapshot of a session statistics data is presented bellow.</div>

<div class="standard"><a id='magicparlabel-346' />
<img src='14C__Projects_svn_trunk_hades_HadesFIXM_docs_userguide_consoleSessStats.png' alt='image: 14C__Projects_svn_trunk_hades_HadesFIXM_docs_userguide_consoleSessStats.png' />
</div>
<h2 class="section"><span class="section_label">8.4</span> <a id='magicparlabel-347' />
Session Events Frame</h2>
<div class="standard"><a id='magicparlabel-348' />
This frame displays the events send by a HadesFIX running instance that require attention. At this point only the Alerts are displayed as these type of events are mostly required in engine supervision.</div>

<div class="standard"><a id='magicparlabel-349' />
Session alert information is composed of:</div>

<ol class="enumerate"><li class="enumerate_item"><a id='magicparlabel-350' />
time stamp when alert occurred</li>
<li class="enumerate_item"><a id='magicparlabel-351' />
session identifier</li>
<li class="enumerate_item"><a id='magicparlabel-352' />
software component that raised the alert (enumeration - <strong>com.marvisan.hades.fix.engine.mgmt.alert.ComponentType</strong>)</li>
<li class="enumerate_item"><a id='magicparlabel-353' />
internal engine error code (enumeration -<strong> com.marvisan.hades.fix.engine.mgmt.alert.AlertCode</strong>)</li>
<li class="enumerate_item"><a id='magicparlabel-354' />
error message textual representation. </li>
<li class="enumerate_item"><a id='magicparlabel-355' />
if an exception was attached to the alert it can be displayed from the contextual menu - <em>View Exception Detail</em> menu item.</li>
</ol>
<div class="standard"><a id='magicparlabel-356' />
The frame toolbar allows for the removal of all the alerts and an alert filter.</div>

<div class="standard"><a id='magicparlabel-357' />
<img src='15C__Projects_svn_trunk_hades_HadesFIXM_docs_userguide_consoleAlertMenu.png' alt='image: 15C__Projects_svn_trunk_hades_HadesFIXM_docs_userguide_consoleAlertMenu.png' />
</div>
<h1 class="chapter"><span class="chapter_label">Chapter 9</span> <a id='magicparlabel-358' />
Administration Command Line</h1>

<blockquote class="verse"><p class="verse_item"><a id='magicparlabel-359' />
Starting with release 1.1.0 the command line management application has been deprecated and replaced by a Swing Management GUI.</p>
</blockquote>
<div class="standard"><a id='magicparlabel-360' />
HadesAdmin is a command line utility tool that connect to the HadesFIX instance JMX server and remotely administer the server. The command line utility is configured using Java system properties.</div>

<div class="standard"><a id='magicparlabel-361' />
The following are the system properties used to configure the HadesAdmin utility:</div>

<ul class="itemize"><li class="itemize_item"><a id='magicparlabel-362' />
hadesfix.remotejmx.host - HadesFIX instance host - REQUIRED parameter</li>
<li class="itemize_item"><a id='magicparlabel-363' />
hadesfix.remotejmx.port - HadesFIX management point as configured in the instance configuration file - REQUIRED parameter</li>
<li class="itemize_item"><a id='magicparlabel-364' />
hadesfix.remotejmx.useauth - flag indicating that the JMX access uses SASL authentication. The server side must be configured for the same type of authentication. </li>
<li class="itemize_item"><a id='magicparlabel-365' />
hadesfix.remotejmx.username - user name. The value of the parameter is the entry name in Password Bank. The corresponing password is send over the wire to the HadesFIX management server HadesAdmin expects that a Password Bank file exists in the same directory the utility is run from. </li>
<li class="itemize_item"><a id='magicparlabel-370' />
hadesfix.remotejmx.usessl - Flag indicating that the transport layer is using SSL. Server side must be configured for SSL too.</li>
<li class="itemize_item"><a id='magicparlabel-371' />
hadesfix.remotejmx.ssl.keystore - the key store file name as an absolute filesystem path</li>
<li class="itemize_item"><a id='magicparlabel-372' />
hadesfix.remotejmx.ssl.keystore.passwd - the key store password. This is the entry name for the password stored in the Password Bank.</li>
<li class="itemize_item"><a id='magicparlabel-373' />
hadesfix.remotejmx.ssl.cliauth - flag indicating the client uses trust authentication</li>
<li class="itemize_item"><a id='magicparlabel-374' />
hadesfix.remotejmx.ssl.truststore - the trusstore store file name as an absolute filesystem path</li>
<li class="itemize_item"><a id='magicparlabel-375' />
hadesfix.remotejmx.ssl.truststore.passwd - the trust store password. This is the entry name for the password stored in the Password Bank.</li>
</ul>
<div class="standard"><a id='magicparlabel-376' />
After successful connection to the management server the console prompt: <strong>hadesadmin&gt;</strong> is displayed together with information about the server it connected to.</div>

<div class="standard"><a id='magicparlabel-377' />
Type help for a summary list of commands.</div>

<div class="standard"><a id='magicparlabel-378' />
The commands supported at this point are listed bellow: </div>

<dl class='description'><dt class="description_label">seslst</dt>
<dd class="description_item"><a id='magicparlabel-379' />
 [&lt;session_id&gt;] - &lt;session_id&gt; parameter is optional. If not present all the session configured on the instance will be listed. The &lt;session_id&gt; parameter is either the number ID value of the session or the session string which is formed as: COUNTERPARTY_ADDREES:SESSION_ADDRESS where counterparty and session address are the concatenated values of CompID, SubID and LocationID separated by a ’.’ character (e.g. yourcomp:yoursub:yourloc:mycomp.mysub.myloc). The output of the command looks like the screenshot bellow: </dd>
<dt class="description_label"><img src='16C__Projects_svn_trunk_hades_HadesFIXM_docs_userguide_SesslistCommandOutput.png' alt='image: 16C__Projects_svn_trunk_hades_HadesFIXM_docs_userguide_SesslistCommandOutput.png' />
</dt>
<dd class="description_item"><a id='magicparlabel-380' />
</dd>
</dl>
<div class="standard"><a id='magicparlabel-381' />
Where the columns in the output significations is: </div>

<ul class="itemize"><li class="itemize_item"><a id='magicparlabel-382' />
ID - Session unique identifier</li>
<li class="itemize_item"><a id='magicparlabel-383' />
Cpty Addr - Counter-party address in the format explained above </li>
<li class="itemize_item"><a id='magicparlabel-384' />
Sess Addr - Current session address in the format explained above </li>
<li class="itemize_item"><a id='magicparlabel-385' />
Type - type of session. One of the 2 values: 
<div class="standard"><a id='magicparlabel-386' />
CLNT - initiator (buy side)</div>

<div class="standard"><a id='magicparlabel-387' />
SRVR - acceptor (sell side) </div>
</li><li class="itemize_item"><a id='magicparlabel-388' />
Stat - Status of the session. One of the values: 
<div class="standard"><a id='magicparlabel-389' />
RUNNING - session connected and active if Client or ready to accept connection if Server </div>

<div class="standard"><a id='magicparlabel-390' />
FROZEN - session connected but frozen (responds only to Heartbeat and TestRequest messages and reject all the others)</div>

<div class="standard"><a id='magicparlabel-391' />
BLOCKED - session not connected </div>

<div class="standard"><a id='magicparlabel-392' />
STOPPED - session is shutdown (no processes exists in memory) </div>
</li><li class="itemize_item"><a id='magicparlabel-393' />
Rx Seq/Tx Seq - receive and transmit sequence numbers at the time the command is run </li>
</ul>

<dl class='description'><dt class="description_label">sesfrz</dt>
<dd class="description_item"><a id='magicparlabel-394' />
 &lt;session_id&gt; - “freezes” a session. A frozen session responds only to Heartbeat and TestRequest messages and reject all the other messages. </dd>
<dt class="description_label">sesthw</dt>
<dd class="description_item"><a id='magicparlabel-395' />
 &lt;session_id&gt; - “thaws” a session already frozen. Activates the session and relay/responds to all the messages received. </dd>
<dt class="description_label">seskil</dt>
<dd class="description_item"><a id='magicparlabel-396' />
 &lt;session_id&gt; - disconnect the session and distroys the memory structures. The session can be restarted using the sesrun command. </dd>
<dt class="description_label">sesrun</dt>
<dd class="description_item"><a id='magicparlabel-397' />
 &lt;session_id&gt; - creates the session data structures and attempts to connect the session transport for the Client side. For the Server side the session is ready to accept incoming connections. </dd>
<dt class="description_label">sesdis</dt>
<dd class="description_item"><a id='magicparlabel-398' />
 &lt;session_id&gt; - disconnects session’s transport. A client session can be reconnected using the sescon command. For the Server side the session is ready to accept incoming connections. </dd>
<dt class="description_label">sescon</dt>
<dd class="description_item"><a id='magicparlabel-399' />
 &lt;session_id&gt; - connects session’s transport. A client session will attempt to reconnect as per configuration. The Server side does not use this command. </dd>
<dt class="description_label">sesrst</dt>
<dd class="description_item"><a id='magicparlabel-400' />
 &lt;session_id&gt; - resets the Rx and Tx sequence numbers to 1 by sending a Logon message with ResetSeqNumFlag field set to true. </dd>
<dt class="description_label">sessta</dt>
<dd class="description_item"><a id='magicparlabel-401' />
 &lt;session_id&gt; - retrieve statistics data for the transport, session and streams. </dd>
<dt class="description_label">seqrst</dt>
<dd class="description_item"><a id='magicparlabel-402' />
 &lt;session_id&gt; <strong>&lt;new_seq_num&gt;</strong> - sends a SequenceReset message in Reset mode (the GapFillFlag set to N) in order to reestablish a session after a unrecoverable error. The new_seq_num parameter needs to be greater than the current Rx sequence number and will become the current Rx sequence number. </dd>
<dt class="description_label">srvdwn</dt>
<dd class="description_item"><a id='magicparlabel-403' />
 shutsdown the HadesFIX instance gracefully allowing for the messages buffered to be transmitted/relayed. </dd>
<dt class="description_label">srvkil</dt>
<dd class="description_item"><a id='magicparlabel-404' />
 abruptly shutsdown the HadesFIX instance. All the messages that were not transmitted/relayed will be lost. </dd>
<dt class="description_label">sessrx</dt>
<dd class="description_item"><a id='magicparlabel-405' />
 &lt;session_id&gt; <strong>&lt;new_seq_num&gt;</strong> - this command should be only used for debugging the protocol. It sets directly the Rx sequence number in the Protocol layer. The session needs to be “frozen” before using the command. </dd>
<dt class="description_label">sesstx</dt>
<dd class="description_item"><a id='magicparlabel-406' />
 &lt;session_id&gt; <strong>&lt;new_seq_num&gt;</strong> - this command should be only useed for debugging the protocol. It sets directly the Tx sequenece number in the Protocol layer. The session needs to be “frozen” before using the command. </dd>
</dl>
</body>
</html>
