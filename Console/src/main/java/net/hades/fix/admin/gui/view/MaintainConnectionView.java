/*
 *   Copyright (c) 2006-2016 Marvisan Pty. Ltd. All rights reserved.
 *               Use is subject to license terms.
 */

/*
 * MaintainConnectionView.java
 *
 * Created on 19/02/2012, 12:06:09 PM
 */
package net.hades.fix.admin.gui.view;

import net.hades.fix.admin.gui.HadesAdminConsole;
import net.hades.fix.admin.session.HadesEngineSession;

import java.awt.Color;
import java.awt.Frame;
import java.io.File;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Iterator;
import java.util.List;
import java.util.logging.Logger;

import javax.swing.JColorChooser;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.UIManager;

import net.hades.fix.admin.gui.config.Configurator;
import net.hades.fix.admin.gui.config.model.AdminConsoleConfigInfo;
import net.hades.fix.admin.gui.config.model.EngineConnectionInfo;
import net.hades.fix.admin.gui.resources.Messages;
import net.hades.fix.admin.gui.util.ConnectionHelper;

/**
 * Maintenance view for a HadesFIX engine connection.
 * 
 * @author <a href="mailto:support@marvisan.com">Support Team</a>
 * @version $Revision: 1.1 $
 */
public class MaintainConnectionView extends JDialog {
    
    private static final long serialVersionUID = 1L;
    
    private static final Logger LOGGER = Logger.getLogger(MaintainConnectionView.class.getName());

    private EngineConnectionInfo connectionInfo;
    private boolean editMode;

    public MaintainConnectionView(Frame parent) {
        super(parent, true);
        this.connectionInfo = new EngineConnectionInfo(((HadesAdminConsole) parent).getConfiguration().getNextConnectionId());
        initComponents();
    }
    
    public MaintainConnectionView(Frame parent, EngineConnectionInfo connectionInfo) {
        super(parent, true);
        this.connectionInfo = connectionInfo;
        initComponents();
        editMode = true;
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        connIdLabel = new javax.swing.JLabel();
        connIdAppLabel = new javax.swing.JLabel();
        javax.swing.JLabel hostLabel = new javax.swing.JLabel();
        javax.swing.JLabel portLabel = new javax.swing.JLabel();
        hostTextField = new javax.swing.JTextField();
        portTextField = new javax.swing.JTextField();
        javax.swing.JLabel userLabel = new javax.swing.JLabel();
        userTextField = new javax.swing.JTextField();
        connAtStartLabel = new javax.swing.JLabel();
        connectAtStartupCheckBox = new javax.swing.JCheckBox();
        javax.swing.JLabel colorLabel = new javax.swing.JLabel();
        colorButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        controlPanel = new javax.swing.JPanel();
        testConnectionButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        pollingIntervalLabel = new javax.swing.JLabel();
        pollingIntervalTextField = new javax.swing.JTextField();
        sslEnabledLabel = new javax.swing.JLabel();
        sslEnabledCheckBox = new javax.swing.JCheckBox();
        authEnabledLabel = new javax.swing.JLabel();
        useAuthCheckBox = new javax.swing.JCheckBox();
        keystorePathLabel = new javax.swing.JLabel();
        keystorePathTextField = new javax.swing.JTextField();
        truststorePathLabel = new javax.swing.JLabel();
        truststorePathTextField = new javax.swing.JTextField();
        sslCliAuthLabel = new javax.swing.JLabel();
        sslCliAuthCheckBox = new javax.swing.JCheckBox();
        sslUserLabel = new javax.swing.JLabel();
        sslUserTextField = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("net/hades/fix/admin/gui/resources/HadesAdminConsole"); // NOI18N
        setTitle(bundle.getString("MaintainConnectionView.title")); // NOI18N
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setFocusCycleRoot(false);
        setName("MaintainConnectionInfo");
        getContentPane().setLayout(new java.awt.GridBagLayout());

        connIdLabel.setText(bundle.getString("MaintainConnectionView.connIdLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 5, 5);
        getContentPane().add(connIdLabel, gridBagConstraints);

        connIdAppLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        connIdAppLabel.setEnabled(false);
        connIdAppLabel.setFocusable(false);
        connIdAppLabel.setMaximumSize(new java.awt.Dimension(10, 4));
        connIdAppLabel.setMinimumSize(new java.awt.Dimension(10, 4));

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${connectionInfo.id}"), connIdAppLabel, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 5, 2, 0);
        getContentPane().add(connIdAppLabel, gridBagConstraints);

        hostLabel.setText(bundle.getString("MaintainConnectionView.hostLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 5);
        getContentPane().add(hostLabel, gridBagConstraints);

        portLabel.setText(bundle.getString("MaintainConnectionView.portLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 5);
        getContentPane().add(portLabel, gridBagConstraints);

        hostTextField.setColumns(30);
        hostTextField.setToolTipText("Host name or IP address of the HadesFIX engine");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${connectionInfo.host}"), hostTextField, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 5, 2, 10);
        getContentPane().add(hostTextField, gridBagConstraints);

        portTextField.setColumns(10);
        portTextField.setToolTipText("HadesFIX engine management port");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${connectionInfo.port}"), portTextField, org.jdesktop.beansbinding.BeanProperty.create("text"), "");
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 5, 2, 0);
        getContentPane().add(portTextField, gridBagConstraints);

        userLabel.setText(bundle.getString("MaintainConnectionView.userLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 5);
        getContentPane().add(userLabel, gridBagConstraints);

        userTextField.setColumns(20);
        userTextField.setToolTipText("User entry name as stored in the password bank");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${connectionInfo.user}"), userTextField, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${connectionInfo.authEnabled}"), userTextField, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 5, 3, 0);
        getContentPane().add(userTextField, gridBagConstraints);

        connAtStartLabel.setText(bundle.getString("MaintainConnectionView.connectAtStartupLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.insets = new java.awt.Insets(5, 20, 5, 5);
        getContentPane().add(connAtStartLabel, gridBagConstraints);

        connectAtStartupCheckBox.setToolTipText("If checked the connection is attempted at startup");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${connectionInfo.connectAtStartup}"), connectAtStartupCheckBox, org.jdesktop.beansbinding.BeanProperty.create("selected"), "connectAtStartup");
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 3, 0);
        getContentPane().add(connectAtStartupCheckBox, gridBagConstraints);

        colorLabel.setText(bundle.getString("MaintainConnectionView.colorLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 5);
        getContentPane().add(colorLabel, gridBagConstraints);

        colorButton.setBackground(getDisplayColor());
        colorButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/net/hades/fix/admin/gui/resources/icons/color_wheel.png"))); // NOI18N
        colorButton.setText(bundle.getString("MaintainConnectionView.colorButton.text")); // NOI18N
        colorButton.setActionCommand("colorButton");
        colorButton.setIconTextGap(10);
        colorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LAST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        getContentPane().add(colorButton, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        getContentPane().add(jSeparator1, gridBagConstraints);

        controlPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 10, 5));

        testConnectionButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/net/hades/fix/admin/gui/resources/icons/test_connect.png"))); // NOI18N
        testConnectionButton.setText(bundle.getString("MaintainConnectionView.testButton.text")); // NOI18N
        testConnectionButton.setIconTextGap(10);
        testConnectionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                testConnectionButtonActionPerformed(evt);
            }
        });
        controlPanel.add(testConnectionButton);

        saveButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/net/hades/fix/admin/gui/resources/icons/save.png"))); // NOI18N
        saveButton.setText(bundle.getString("MaintainConnectionView.saveButton.text")); // NOI18N
        saveButton.setIconTextGap(10);
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });
        controlPanel.add(saveButton);

        cancelButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/net/hades/fix/admin/gui/resources/icons/cancel.png"))); // NOI18N
        cancelButton.setText(bundle.getString("MaintainConnectionView.cancelButton.text")); // NOI18N
        cancelButton.setIconTextGap(10);
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });
        controlPanel.add(cancelButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        getContentPane().add(controlPanel, gridBagConstraints);

        pollingIntervalLabel.setText(bundle.getString("MaintainConnectionView.pollingIntervalLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 5);
        getContentPane().add(pollingIntervalLabel, gridBagConstraints);

        pollingIntervalTextField.setColumns(5);
        pollingIntervalTextField.setToolTipText("Set 0 to disable auto polling");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${connectionInfo.pollingIntervalSecs}"), pollingIntervalTextField, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(3, 5, 3, 0);
        getContentPane().add(pollingIntervalTextField, gridBagConstraints);

        sslEnabledLabel.setText(bundle.getString("MaintainConnectionView.useSSLLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 5);
        getContentPane().add(sslEnabledLabel, gridBagConstraints);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${connectionInfo.sslEnabled}"), sslEnabledCheckBox, org.jdesktop.beansbinding.BeanProperty.create("selected"));
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 3, 0);
        getContentPane().add(sslEnabledCheckBox, gridBagConstraints);

        authEnabledLabel.setText(bundle.getString("MaintainConnectionView.useAuthLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 5);
        getContentPane().add(authEnabledLabel, gridBagConstraints);

        useAuthCheckBox.setToolTipText("");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${connectionInfo.authEnabled}"), useAuthCheckBox, org.jdesktop.beansbinding.BeanProperty.create("selected"));
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 3, 0);
        getContentPane().add(useAuthCheckBox, gridBagConstraints);

        keystorePathLabel.setText(bundle.getString("MaintainConnectionView.keystorePathLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 5);
        getContentPane().add(keystorePathLabel, gridBagConstraints);

        keystorePathTextField.setColumns(30);
        keystorePathTextField.setToolTipText("Click to change. Location on disk of the keystore file");
        keystorePathTextField.setFocusable(false);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${connectionInfo.keystorePath}"), keystorePathTextField, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${connectionInfo.sslCliAuthEnabled}"), keystorePathTextField, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        keystorePathTextField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                keystorePathTextFieldMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(3, 5, 3, 0);
        getContentPane().add(keystorePathTextField, gridBagConstraints);

        truststorePathLabel.setText(bundle.getString("MaintainConnectionView.truststorePathLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 5);
        getContentPane().add(truststorePathLabel, gridBagConstraints);

        truststorePathTextField.setColumns(30);
        truststorePathTextField.setToolTipText("Click to change. Location on disk of the truststore file");
        truststorePathTextField.setFocusable(false);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${connectionInfo.truststorePath}"), truststorePathTextField, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${connectionInfo.sslEnabled}"), truststorePathTextField, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        truststorePathTextField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                truststorePathTextFieldMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(3, 5, 3, 0);
        getContentPane().add(truststorePathTextField, gridBagConstraints);

        sslCliAuthLabel.setText(bundle.getString("MaintainConnectionView.useSSLCliAuthLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 5);
        getContentPane().add(sslCliAuthLabel, gridBagConstraints);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${connectionInfo.sslCliAuthEnabled}"), sslCliAuthCheckBox, org.jdesktop.beansbinding.BeanProperty.create("selected"), "sslCliAuth");
        bindingGroup.addBinding(binding);
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, sslEnabledCheckBox, org.jdesktop.beansbinding.ELProperty.create("${selected}"), sslCliAuthCheckBox, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 3, 0);
        getContentPane().add(sslCliAuthCheckBox, gridBagConstraints);

        sslUserLabel.setText(bundle.getString("MaintainConnectionView.keystoreUserLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 5);
        getContentPane().add(sslUserLabel, gridBagConstraints);

        sslUserTextField.setColumns(20);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${connectionInfo.sslUser}"), sslUserTextField, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${connectionInfo.sslEnabled}"), sslUserTextField, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(3, 5, 3, 0);
        getContentPane().add(sslUserTextField, gridBagConstraints);

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void colorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorButtonActionPerformed
        Color chosen = JColorChooser.showDialog(this, 
                Messages.getString("MaintainConnectionView.AppMsg.chooseColor.text"), 
                getDisplayColor());
        connectionInfo.setDisplayColor(String.format("%s,%s,%s", chosen.getRed(), chosen.getGreen(), chosen.getBlue()));
        colorButton.setBackground(chosen);
    }//GEN-LAST:event_colorButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void testConnectionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testConnectionButtonActionPerformed
        try {
            HadesEngineSession session = ConnectionHelper.connectToEngine(connectionInfo);
            JOptionPane.showMessageDialog(this,
                    Messages.getString("MaintainConnectionView.AppMsg.testConnect.text", session.getHadesInstanceName()),
                    Messages.getString("MaintainConnectionView.AppMsg.testConnect.title", connectionInfo.getHost(), connectionInfo.getPort()),
                    JOptionPane.INFORMATION_MESSAGE);
            session.disconnect();
        } catch (Exception ex) {
            String cause = ex.getCause() != null ? " " + ex.getCause().getMessage() : "";
            JOptionPane.showMessageDialog(this,
                    ex.getMessage() + cause,
                    Messages.getString("MaintainConnectionView.ErrMsg.testConnect.title", connectionInfo.getHost(), connectionInfo.getPort()),
                    JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_testConnectionButtonActionPerformed

    private void keystorePathTextFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_keystorePathTextFieldMouseClicked
        if (!sslEnabledCheckBox.isSelected() || !sslCliAuthCheckBox.isSelected()) {
            return;
        }
        JFileChooser chooser = new JFileChooser();
        String currentDir;
        if (keystorePathTextField.getText() != null && !keystorePathTextField.getText().isEmpty()) {
            currentDir = keystorePathTextField.getText();
        } else {
            currentDir = System.getProperty("user.dir");
        }
        chooser.setCurrentDirectory(new File(currentDir));
        int returnVal = chooser.showOpenDialog(this);
        if(returnVal == JFileChooser.APPROVE_OPTION) {
            Path pathAbsolute = Paths.get(chooser.getSelectedFile().getAbsolutePath());
            Path pathBase = Paths.get(System.getProperty("user.dir"));
            Path pathRelative = pathBase.relativize(pathAbsolute);

            keystorePathTextField.setText(pathRelative.toString());
            connectionInfo.setKeystorePath(pathRelative.toString());
        }
    }//GEN-LAST:event_keystorePathTextFieldMouseClicked

    private void truststorePathTextFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_truststorePathTextFieldMouseClicked
        if (!sslEnabledCheckBox.isSelected()) {
            return;
        }
        JFileChooser chooser = new JFileChooser();
        String currentDir;
        if (truststorePathTextField.getText() != null && !truststorePathTextField.getText().isEmpty()) {
            currentDir = truststorePathTextField.getText();
        } else {
            currentDir = System.getProperty("user.dir");
        }
        chooser.setCurrentDirectory(new File(currentDir));
        int returnVal = chooser.showOpenDialog(this);
        if(returnVal == JFileChooser.APPROVE_OPTION) {
            Path pathAbsolute = Paths.get(chooser.getSelectedFile().getAbsolutePath());
            Path pathBase = Paths.get(System.getProperty("user.dir"));
            Path pathRelative = pathBase.relativize(pathAbsolute);
            
            truststorePathTextField.setText(pathRelative.toString());
            connectionInfo.setTruststorePath(pathRelative.toString());
        }
    }//GEN-LAST:event_truststorePathTextFieldMouseClicked

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        try {
            ConnectionHelper.validateConnectionInfo(connectionInfo);
            AdminConsoleConfigInfo config = ((HadesAdminConsole)getParent()).getConfiguration();
            if (config.getEngineConnections() == null || config.getEngineConnections().length == 0) {
                config.setEngineConnections(new EngineConnectionInfo[] {connectionInfo});
            } else {
                List<EngineConnectionInfo> engineConns = new ArrayList<EngineConnectionInfo>(Arrays.asList(config.getEngineConnections()));
                if (editMode) {
                    for (Iterator<EngineConnectionInfo> it = engineConns.iterator(); it.hasNext();) {
                        if (it.next().getId().equals(connectionInfo.getId())) {
                            it.remove();
                            break;
                        }
                    }
                } 
                engineConns.add(connectionInfo);
                EngineConnectionInfo[] conns = engineConns.toArray(new EngineConnectionInfo[engineConns.size()]);
                config.setEngineConnections(conns);
                ((HadesAdminConsole) getParent()).getConnectionTableModel().setConnections(conns);
            }
            config.getInternalInfo().setNextConnInfoId(connectionInfo.getId() + 1);
            Configurator.saveConfiguration(config);
            
            dispose();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this,
                ex.getMessage(),
                Messages.getString("MaintainConnectionView.ErrMsg.saveConfig.text"),
                JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_saveButtonActionPerformed

    public EngineConnectionInfo getConnectionInfo() {
        return connectionInfo;
    }

    public void setConnectionInfo(EngineConnectionInfo connectionInfo) {
        this.connectionInfo = connectionInfo;
    }
    
    public Color getDisplayColor() {
        int[] colorCodes = connectionInfo.getDisplayColorCodes();
        return new Color(colorCodes[0], colorCodes[1], colorCodes[2]);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MaintainConnectionView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MaintainConnectionView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MaintainConnectionView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MaintainConnectionView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the dialog
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                MaintainConnectionView dialog = new MaintainConnectionView(new javax.swing.JFrame());
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel authEnabledLabel;
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton colorButton;
    private javax.swing.JLabel connAtStartLabel;
    private javax.swing.JLabel connIdAppLabel;
    private javax.swing.JLabel connIdLabel;
    private javax.swing.JCheckBox connectAtStartupCheckBox;
    private javax.swing.JPanel controlPanel;
    private javax.swing.JTextField hostTextField;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel keystorePathLabel;
    private javax.swing.JTextField keystorePathTextField;
    private javax.swing.JLabel pollingIntervalLabel;
    private javax.swing.JTextField pollingIntervalTextField;
    private javax.swing.JTextField portTextField;
    private javax.swing.JButton saveButton;
    private javax.swing.JCheckBox sslCliAuthCheckBox;
    private javax.swing.JLabel sslCliAuthLabel;
    private javax.swing.JCheckBox sslEnabledCheckBox;
    private javax.swing.JLabel sslEnabledLabel;
    private javax.swing.JLabel sslUserLabel;
    private javax.swing.JTextField sslUserTextField;
    private javax.swing.JButton testConnectionButton;
    private javax.swing.JLabel truststorePathLabel;
    private javax.swing.JTextField truststorePathTextField;
    private javax.swing.JCheckBox useAuthCheckBox;
    private javax.swing.JTextField userTextField;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
}
