/*
 *   Copyright (c) 2006-2016 Marvisan Pty. Ltd. All rights reserved.
 *               Use is subject to license terms.
 */

/*
 * AlertFilterView.java
 *
 * Created on 19/02/2012, 12:06:09 PM
 */
package net.hades.fix.admin.gui.view;

import java.awt.Frame;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import javax.swing.UIManager;

import org.jdesktop.observablecollections.ObservableCollections;

import net.hades.fix.admin.gui.HadesAdminConsole;
import net.hades.fix.admin.gui.config.model.AdminConsoleConfigInfo;
import net.hades.fix.admin.gui.config.model.AlertFilterInfo;

/**
 * Alert filter options view.
 *
 * @author <a href="mailto:support@marvisan.com">Support Team</a>
 * @version $Revision: 1.1 $
 */
public class AlertFilterView extends javax.swing.JDialog {
    private static final long serialVersionUID = 1L;
    
    private static final String[] ComponentTypes = new String[] {"--- None ---",
        "MBeanServer",
        "TCPClient",
        "TCPServer",
        "FIXClient",
        "FIXServer",
        "ConsumerHandler",
        "ProducerHandler",
        "ConsumerProducerHandler",
        "ConsumerFlow",
        "ProducerFlow",
        "ConsumerStream",
        "ProducerStream",
        "SessionCoordinator",
        "Scheduler",
        "SchedulerTask"};
    
    private List<String> componentTypeList = ObservableCollections.observableList(new ArrayList<String>(Arrays.asList(ComponentTypes)));
    
    private  AlertFilterInfo alertFilter;
    
    public AlertFilterView(Frame parent, boolean modal) {
        super(parent, modal);
        initConfiguration();
        initComponents();
        setSelectedComponentTypes();
    }

    public AlertFilterView(Frame parent) {
        this(parent, true);
    }

    public AlertFilterInfo getAlertFilter() {
        return alertFilter;
    }

    public List<String> getComponentTypeList() {
        return componentTypeList;
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        severityFilterPanel = new javax.swing.JPanel();
        fatalCheckBox = new javax.swing.JCheckBox();
        warnCheckBox = new javax.swing.JCheckBox();
        recovCheckBox = new javax.swing.JCheckBox();
        infoCheckBox = new javax.swing.JCheckBox();
        testCheckBox = new javax.swing.JCheckBox();
        sessionFilterPanel = new javax.swing.JPanel();
        sessionNameLabel = new javax.swing.JLabel();
        sessionNameTextField = new javax.swing.JTextField();
        componentFilterPanel = new javax.swing.JPanel();
        compNameLabel = new javax.swing.JLabel();
        filterCompTypeScrollPane = new javax.swing.JScrollPane();
        filterCompTypeList = new javax.swing.JList();
        filterControlPanel = new javax.swing.JPanel();
        saveFilterButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(480, 680));
        setModal(true);
        setPreferredSize(new java.awt.Dimension(480, 680));
        getContentPane().setLayout(new java.awt.GridBagLayout());

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("net/hades/fix/admin/gui/resources/HadesAdminConsole"); // NOI18N
        severityFilterPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle.getString("AlertFilterView.severityFilterPanel.title"))); // NOI18N
        severityFilterPanel.setLayout(new java.awt.GridBagLayout());

        fatalCheckBox.setText(bundle.getString("AlertFilterView.severityFilterPanel.checkbox.fatal.text")); // NOI18N

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${alertFilter.filterFatal}"), fatalCheckBox, org.jdesktop.beansbinding.BeanProperty.create("selected"));
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 5);
        severityFilterPanel.add(fatalCheckBox, gridBagConstraints);

        warnCheckBox.setText(bundle.getString("AlertFilterView.severityFilterPanel.checkbox.warning.text")); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${alertFilter.filterWarning}"), warnCheckBox, org.jdesktop.beansbinding.BeanProperty.create("selected"));
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 5, 10, 5);
        severityFilterPanel.add(warnCheckBox, gridBagConstraints);

        recovCheckBox.setText(bundle.getString("AlertFilterView.severityFilterPanel.checkbox.recoverable.text")); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${alertFilter.filterRecoverable}"), recovCheckBox, org.jdesktop.beansbinding.BeanProperty.create("selected"));
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 5, 10, 5);
        severityFilterPanel.add(recovCheckBox, gridBagConstraints);

        infoCheckBox.setText(bundle.getString("AlertFilterView.severityFilterPanel.checkbox.info.text")); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${alertFilter.filterInfo}"), infoCheckBox, org.jdesktop.beansbinding.BeanProperty.create("selected"));
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 5, 10, 5);
        severityFilterPanel.add(infoCheckBox, gridBagConstraints);

        testCheckBox.setText(bundle.getString("AlertFilterView.severityFilterPanel.checkbox.test.text")); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${alertFilter.filterTest}"), testCheckBox, org.jdesktop.beansbinding.BeanProperty.create("selected"));
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 5, 10, 10);
        severityFilterPanel.add(testCheckBox, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(severityFilterPanel, gridBagConstraints);

        sessionFilterPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle.getString("AlertFilterView.sessionFilterPanel.title"))); // NOI18N
        sessionFilterPanel.setMinimumSize(new java.awt.Dimension(348, 80));
        sessionFilterPanel.setPreferredSize(new java.awt.Dimension(348, 80));
        sessionFilterPanel.setRequestFocusEnabled(false);
        sessionFilterPanel.setVerifyInputWhenFocusTarget(false);
        sessionFilterPanel.setLayout(new java.awt.GridBagLayout());

        sessionNameLabel.setText(bundle.getString("AlertFilterView.sessionFilterPanel.sessionNameLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 5);
        sessionFilterPanel.add(sessionNameLabel, gridBagConstraints);

        sessionNameTextField.setColumns(30);
        sessionNameTextField.setMinimumSize(new java.awt.Dimension(246, 20));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${alertFilter.session}"), sessionNameTextField, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(6, 5, 6, 10);
        sessionFilterPanel.add(sessionNameTextField, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(sessionFilterPanel, gridBagConstraints);

        componentFilterPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle.getString("AlertFilterView.componentFilterPanel.title"))); // NOI18N
        componentFilterPanel.setLayout(new java.awt.GridBagLayout());

        compNameLabel.setText(bundle.getString("AlertFilterView.sessionFilterPanel.componentNameLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 5);
        componentFilterPanel.add(compNameLabel, gridBagConstraints);

        filterCompTypeScrollPane.setMaximumSize(new java.awt.Dimension(400, 600));
        filterCompTypeScrollPane.setMinimumSize(new java.awt.Dimension(220, 320));
        filterCompTypeScrollPane.setName("");
        filterCompTypeScrollPane.setPreferredSize(new java.awt.Dimension(220, 320));

        filterCompTypeList.setToolTipText("");
        filterCompTypeList.setMaximumSize(new java.awt.Dimension(400, 600));
        filterCompTypeList.setMinimumSize(new java.awt.Dimension(200, 300));
        filterCompTypeList.setName("");
        filterCompTypeList.setPreferredSize(new java.awt.Dimension(200, 300));
        filterCompTypeList.setVisibleRowCount(12);

        org.jdesktop.beansbinding.ELProperty eLProperty = org.jdesktop.beansbinding.ELProperty.create("${componentTypeList}");
        org.jdesktop.swingbinding.JListBinding jListBinding = org.jdesktop.swingbinding.SwingBindings.createJListBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, eLProperty, filterCompTypeList);
        bindingGroup.addBinding(jListBinding);

        filterCompTypeScrollPane.setViewportView(filterCompTypeList);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 5, 10, 10);
        componentFilterPanel.add(filterCompTypeScrollPane, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(componentFilterPanel, gridBagConstraints);

        filterControlPanel.setLayout(new java.awt.GridBagLayout());

        saveFilterButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/net/hades/fix/admin/gui/resources/icons/save.png"))); // NOI18N
        saveFilterButton.setText(bundle.getString("AlertFilterView.saveFilterButton.text")); // NOI18N
        saveFilterButton.setIconTextGap(10);
        saveFilterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveFilterButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 20);
        filterControlPanel.add(saveFilterButton, gridBagConstraints);

        cancelButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/net/hades/fix/admin/gui/resources/icons/cancel.png"))); // NOI18N
        cancelButton.setText(bundle.getString("AlertFilterView.cancelButton.text")); // NOI18N
        cancelButton.setIconTextGap(10);
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(5, 20, 5, 0);
        filterControlPanel.add(cancelButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(filterControlPanel, gridBagConstraints);

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void saveFilterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveFilterButtonActionPerformed
        alertFilter.setComponents(getSelectedComponentTypes());
        ((HadesAdminConsole)getOwner()).saveConfiguration(alertFilter);
        dispose();
    }//GEN-LAST:event_saveFilterButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AlertFilterView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AlertFilterView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AlertFilterView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AlertFilterView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the dialog
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                AlertFilterView dialog = new AlertFilterView(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JLabel compNameLabel;
    private javax.swing.JPanel componentFilterPanel;
    private javax.swing.JCheckBox fatalCheckBox;
    private javax.swing.JList filterCompTypeList;
    private javax.swing.JScrollPane filterCompTypeScrollPane;
    private javax.swing.JPanel filterControlPanel;
    private javax.swing.JCheckBox infoCheckBox;
    private javax.swing.JCheckBox recovCheckBox;
    private javax.swing.JButton saveFilterButton;
    private javax.swing.JPanel sessionFilterPanel;
    private javax.swing.JLabel sessionNameLabel;
    private javax.swing.JTextField sessionNameTextField;
    private javax.swing.JPanel severityFilterPanel;
    private javax.swing.JCheckBox testCheckBox;
    private javax.swing.JCheckBox warnCheckBox;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

    private void initConfiguration() {
        AdminConsoleConfigInfo config = ((HadesAdminConsole)getOwner()).getConfiguration();
        if (config.getAlertFilter() == null) {
            alertFilter = new AlertFilterInfo();
        } else {
            alertFilter = config.getAlertFilter();
        }
    }
    
    private void setSelectedComponentTypes() {
        if (alertFilter == null || alertFilter.getComponents() == null || alertFilter.getComponents().size() <= 0) {
            filterCompTypeList.setSelectedIndex(-1);
            return;
        }
        int j = 0;
        int[] selectedIndices = new int[alertFilter.getComponents().size()];
        for (int i = 0; i < filterCompTypeList.getModel().getSize(); i++) {
            String comp = (String) filterCompTypeList.getModel().getElementAt(i);
            if (alertFilter != null && alertFilter.getComponents() != null && alertFilter.getComponents().size() > 0) {
                for (String c :  alertFilter.getComponents()) {
                    if (c.equals(comp)) {
                        selectedIndices[j] = i;
                        j++;
                        break;
                    }
                }
            }
        }
        filterCompTypeList.setSelectedIndices(selectedIndices);
    }
    
    private List<String> getSelectedComponentTypes() {
        List<String> selected = new ArrayList<String>();
        int[] selectedArry = filterCompTypeList.getSelectedIndices();
        if (selectedArry != null && selectedArry.length > 0) {
            for (int sel : selectedArry) {
                selected.add((String)filterCompTypeList.getModel().getElementAt(sel));
            }
        }
        
        return selected;
    }
}
